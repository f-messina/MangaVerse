Index: src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MediaContentDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.lsmsd.fnf.dto.mediaContent;\r\n\r\nimport org.bson.types.ObjectId;\r\nimport org.neo4j.driver.Record;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic abstract class MediaContentDTO {\r\n    private ObjectId id;\r\n    private String title;\r\n    private String imageUrl;\r\n    private Double averageRating;\r\n\r\n    public MediaContentDTO() {\r\n    }\r\n\r\n    public MediaContentDTO(ObjectId id, String title, String imageUrl, Double averageRating) {\r\n        this.id = id;\r\n        this.title = title;\r\n        this.imageUrl = imageUrl;\r\n        this.averageRating = averageRating;\r\n    }\r\n\r\n    public MediaContentDTO(ObjectId id, String title, String imageUrl) {\r\n        this.id = id;\r\n        this.title = title;\r\n        this.imageUrl = imageUrl;\r\n    }\r\n\r\n    public ObjectId getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(ObjectId id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    public void setTitle(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    public String getImageUrl() {\r\n        return imageUrl;\r\n    }\r\n\r\n    public void setImageUrl(String imageUrl) {\r\n        this.imageUrl = imageUrl;\r\n    }\r\n\r\n    public Double getAverageRating() {\r\n        return averageRating;\r\n    }\r\n\r\n    public void setAverageRating(Double averageRating) {\r\n        this.averageRating = averageRating;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"MediaContentDTO{\" +\r\n                \"id='\" + id + '\\'' +\r\n                \", title='\" + title + '\\'' +\r\n                \", imageUrl='\" + imageUrl + '\\'' +\r\n\r\n                \", averageRating='\" + averageRating + '\\'' +\r\n\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MediaContentDTO.java b/src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MediaContentDTO.java
--- a/src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MediaContentDTO.java	(revision 31d1c7c14f1c424a4f510c3f0936c0bdc0c8d2ec)
+++ b/src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MediaContentDTO.java	(date 1707677583030)
@@ -14,6 +14,10 @@
     private String imageUrl;
     private Double averageRating;
 
+
+
+    private Integer numLikes;
+
     public MediaContentDTO() {
     }
 
@@ -62,6 +66,14 @@
         this.averageRating = averageRating;
     }
 
+    public Integer getNumLikes() {
+        return numLikes;
+    }
+
+    public void setNumLikes(Integer numLikes) {
+        this.numLikes = numLikes;
+    }
+
     @Override
     public String toString() {
         return "MediaContentDTO{" +
@@ -70,6 +82,7 @@
                 ", imageUrl='" + imageUrl + '\'' +
 
                 ", averageRating='" + averageRating + '\'' +
+                ", numLikes='" + numLikes + '\'' +
 
                 '}';
     }
Index: src/main/java/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.lsmsd.fnf.service.impl;\r\n\r\nimport it.unipi.lsmsd.fnf.dao.*;\r\nimport it.unipi.lsmsd.fnf.dao.enums.DataRepositoryEnum;\r\nimport it.unipi.lsmsd.fnf.dao.exception.DAOException;\r\nimport it.unipi.lsmsd.fnf.dto.PageDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.AnimeDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.MangaDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.MediaContentDTO;\r\nimport it.unipi.lsmsd.fnf.model.enums.MediaContentType;\r\nimport it.unipi.lsmsd.fnf.model.mediaContent.Anime;\r\nimport it.unipi.lsmsd.fnf.model.mediaContent.Manga;\r\nimport it.unipi.lsmsd.fnf.model.mediaContent.MediaContent;\r\nimport it.unipi.lsmsd.fnf.service.MediaContentService;\r\nimport it.unipi.lsmsd.fnf.service.exception.BusinessException;\r\nimport it.unipi.lsmsd.fnf.dao.Neo4JDAO;\r\n\r\n\r\nimport org.bson.types.ObjectId;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport static it.unipi.lsmsd.fnf.dao.DAOLocator.*;\r\nimport static it.unipi.lsmsd.fnf.service.mapper.ModelToDtoMapper.animeToAnimeDTO;\r\nimport static it.unipi.lsmsd.fnf.service.mapper.ModelToDtoMapper.mangaToMangaDTO;\r\nimport static java.util.Collections.singletonMap;\r\n\r\npublic class MediaContentServiceImpl implements MediaContentService {\r\n    private static final MediaContentDAO<Anime> animeDAO;\r\n    private static final MediaContentDAO<Manga> mangaDAO;\r\n    private static final PersonalListDAO personalListDAO;\r\n    private static final ReviewDAO reviewDAO;\r\n    private static final Neo4JDAO neo4JDAO;\r\n\r\n    static {\r\n        animeDAO = getAnimeDAO(DataRepositoryEnum.MONGODB);\r\n        mangaDAO = getMangaDAO(DataRepositoryEnum.MONGODB);\r\n        personalListDAO = getPersonalListDAO(DataRepositoryEnum.MONGODB);\r\n        reviewDAO = getReviewDAO(DataRepositoryEnum.MONGODB);\r\n        neo4JDAO = DAOLocator.getNeo4JDAO(DataRepositoryEnum.NEO4J);\r\n    }\r\n\r\n    @Override\r\n    public void addMediaContent(MediaContent mediaContent) throws BusinessException {\r\n        try {\r\n            if (mediaContent instanceof Anime) {\r\n                animeDAO.insert((Anime) mediaContent);\r\n            } else if (mediaContent instanceof Manga) {\r\n                mangaDAO.insert((Manga) mediaContent);\r\n            }\r\n        } catch (Exception e) {\r\n            throw new BusinessException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void updateMediaContent(MediaContent mediaContent) throws BusinessException {\r\n        try {\r\n            if (mediaContent instanceof Anime) {\r\n                animeDAO.update((Anime) mediaContent);\r\n                if (mediaContent.getTitle() != null || mediaContent.getImageUrl() != null) {\r\n                    personalListDAO.updateItem(animeToAnimeDTO((Anime) mediaContent));\r\n                }\r\n            } else if (mediaContent instanceof Manga) {\r\n                mangaDAO.update((Manga) mediaContent);\r\n                if (mediaContent.getTitle() != null || mediaContent.getImageUrl() != null) {\r\n                    personalListDAO.updateItem(mangaToMangaDTO((Manga) mediaContent));\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            throw new BusinessException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void removeMediaContent(String id, MediaContentType type) throws BusinessException {\r\n        try {\r\n            if (MediaContentType.ANIME.equals(type)) {\r\n                animeDAO.delete(new ObjectId(id));\r\n            } else if (MediaContentType.MANGA.equals(type)) {\r\n                mangaDAO.delete(new ObjectId(id));\r\n            } else {\r\n                throw new BusinessException(\"Invalid media content type\");\r\n            }\r\n            personalListDAO.removeItem(new ObjectId(id));\r\n            reviewDAO.deleteByMedia(new ObjectId(id));\r\n        } catch (Exception e) {\r\n            throw new BusinessException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public MediaContent getMediaContentById(String id, MediaContentType type) throws BusinessException {\r\n        try {\r\n            if (MediaContentType.ANIME.equals(type)) {\r\n                return animeDAO.find(new ObjectId(id));\r\n            } else if (MediaContentType.MANGA.equals(type)) {\r\n                return mangaDAO.find(new ObjectId(id));\r\n            } else {\r\n                throw new BusinessException(\"Invalid media content type\");\r\n            }\r\n        } catch (Exception e) {\r\n            throw new BusinessException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public PageDTO<? extends MediaContentDTO> searchByFilter(Map<String, Object> filters, Map<String, Integer> orderBy, int page, MediaContentType type) throws BusinessException {\r\n        try {\r\n            if (MediaContentType.ANIME.equals(type)) {\r\n                return animeDAO.search(filters, orderBy, page);\r\n            } else if (MediaContentType.MANGA.equals(type)) {\r\n                return mangaDAO.search(filters, orderBy, page);\r\n            } else {\r\n                throw new BusinessException(\"Invalid media content type\");\r\n            }\r\n        } catch (Exception e) {\r\n            throw new BusinessException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public PageDTO<? extends MediaContentDTO> searchByTitle(String title, int page, MediaContentType type) throws BusinessException {\r\n        try {\r\n            if (MediaContentType.ANIME.equals(type)) {\r\n                return animeDAO.search(singletonMap(\"title\", title), singletonMap(\"score\", null), page);\r\n            } else if (MediaContentType.MANGA.equals(type)) {\r\n                return mangaDAO.search(singletonMap(\"title\", title), singletonMap(\"score\", null), page);\r\n            } else {\r\n                throw new BusinessException(\"Invalid media content type\");\r\n            }\r\n        } catch (Exception e) {\r\n            throw new BusinessException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void likeMediaContent(String userId, String mediaId) throws BusinessException {\r\n        try {\r\n            neo4JDAO.likeMediaContent(userId, mediaId);\r\n\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while liking the media content.\", e);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void unlikeMediaContent(String userId, String mediaId) throws BusinessException {\r\n        try {\r\n            neo4JDAO.unlikeMediaContent(userId, mediaId);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while unliking media content.\", e);\r\n        }\r\n    }\r\n\r\n    /*@Override\r\n    public List<MediaContentDTO> getLikedMediaContents(String userId) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getLikedMediaContents(userId);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while retrieving liked media contents.\", e);\r\n        }\r\n    }*/\r\n\r\n    @Override\r\n    public List<AnimeDTO> getLikedAnime(String userId) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getLikedAnime(userId);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while retrieving liked anime.\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<MangaDTO> getLikedManga(String userId) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getLikedManga(userId);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while retrieving liked manga.\", e);\r\n        }\r\n    }\r\n\r\n    /*@Override\r\n    public List<Record> suggestMediaContents(String userId) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.suggestMediaContents(userId);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while suggesting media contents.\", e);\r\n        }\r\n    }*/\r\n\r\n    @Override\r\n    public List<AnimeDTO> suggestAnime(String userId) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.suggestAnime(userId);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while suggesting anime.\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<MangaDTO> suggestManga(String userId) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.suggestManga(userId);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while suggesting manga.\", e);\r\n        }\r\n    }\r\n\r\n\r\n    /*@Override\r\n    public List<Record> getTrendByYear(int year) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getTrendByYear(year);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }*/\r\n\r\n    @Override\r\n    public List<AnimeDTO> getTrendAnimeByYear(int year) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getTrendAnimeByYear(year);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<MangaDTO> getTrendMangaByYear(int year) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getTrendMangaByYear(year);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }\r\n\r\n    /*@Override\r\n    public List<Record> getMediaContentByGenre(String genre) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getMediaContentByGenre(genre);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while getting media content by genre.\", e);\r\n        }\r\n\r\n    }*/\r\n\r\n    @Override\r\n    public List<AnimeDTO> getAnimeByGenre(String genre) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getAnimeByGenre(genre);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while getting anime by genre.\", e);\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public List<MangaDTO> getMangaByGenre(String genre) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getMangaByGenre(genre);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while getting manga by genre.\", e);\r\n        }\r\n\r\n    }\r\n\r\n    /*@Override\r\n    public List<Record> suggestMediaContentByGenre(String userId) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.suggestMediaContentByGenre(userId);\r\n        } catch(DAOException e) {\r\n            throw new BusinessException(\"Error while suggesting media content by genre.\", e);\r\n        }\r\n    }*/\r\n\r\n    @Override\r\n    public List<AnimeDTO> suggestAnimeByGenre(String userId) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.suggestAnimeByGenre(userId);\r\n        } catch(DAOException e) {\r\n            throw new BusinessException(\"Error while suggesting anime by genre.\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<MangaDTO> suggestMangaByGenre(String userId) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.suggestMangaByGenre(userId);\r\n        } catch(DAOException e) {\r\n            throw new BusinessException(\"Error while suggesting manga by genre.\", e);\r\n        }\r\n    }\r\n\r\n    //Show the trends of the genres for year\r\n    /*@Override\r\n    public List<Record> getGenresTrendByYear(int year) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getGenresTrendByYear(year);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }*/\r\n\r\n    @Override\r\n    public List<List<String>> getAnimeGenresTrendByYear(int year) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getAnimeGenresTrendByYear(year);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<List<String>> getMangaGenresTrendByYear(int year) throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getMangaGenresTrendByYear(year);\r\n        } catch (DAOException e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }\r\n\r\n\r\n    /*@Override\r\n    public List<Record> getTrendByGenre() throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getTrendByGenre();\r\n        } catch(Exception e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }*/\r\n\r\n    @Override\r\n    public List<AnimeDTO> getAnimeTrendByGenre() throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getAnimeTrendByGenre();\r\n        } catch(Exception e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<MangaDTO> getMangaTrendByGenre() throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getMangaTrendByGenre();\r\n        } catch(Exception e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }\r\n\r\n    //Show the trends of the likes in general\r\n    /*@Override\r\n    public List<Record> getTrendByLikes() throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getTrendByLikes();\r\n        } catch(Exception e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }*/\r\n\r\n    @Override\r\n    public List<AnimeDTO> getAnimeTrendByLikes() throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getAnimeTrendByLikes();\r\n        } catch(Exception e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<MangaDTO> getMangaTrendByLikes() throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getMangaTrendByLikes();\r\n        } catch(Exception e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }\r\n\r\n    //Show the trends of the genres in general\r\n    /*@Override\r\n    public List<Record> getGenresTrend() throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getGenresTrend();\r\n        } catch (Exception e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }*/\r\n\r\n    @Override\r\n    public List<List<String>> getAnimeGenresTrend() throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getAnimeGenresTrend();\r\n        } catch (Exception e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<List<String>> getMangaGenresTrend() throws BusinessException {\r\n        try {\r\n            return neo4JDAO.getMangaGenresTrend();\r\n        } catch (Exception e) {\r\n            throw new BusinessException(\"Error while retrieving the trend.\", e);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.java b/src/main/java/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.java
--- a/src/main/java/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.java	(revision 31d1c7c14f1c424a4f510c3f0936c0bdc0c8d2ec)
+++ b/src/main/java/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.java	(date 1707781823184)
@@ -136,33 +136,44 @@
     }
 
     @Override
-    public void likeMediaContent(String userId, String mediaId) throws BusinessException {
+    public void likeAnime(String userId, String animeId) throws BusinessException {
+        try {
+            neo4JDAO.likeAnime(userId, animeId);
+
+        } catch (DAOException e) {
+            throw new BusinessException("Error while liking the anime.", e);
+        }
+    }
+
+    @Override
+    public void likeManga(String userId, String mangaId) throws BusinessException {
         try {
-            neo4JDAO.likeMediaContent(userId, mediaId);
+            neo4JDAO.likeManga(userId, mangaId);
 
         } catch (DAOException e) {
-            throw new BusinessException("Error while liking the media content.", e);
+            throw new BusinessException("Error while liking the manga.", e);
         }
     }
 
 
     @Override
-    public void unlikeMediaContent(String userId, String mediaId) throws BusinessException {
+    public void unlikeAnime(String userId, String animeId) throws BusinessException {
         try {
-            neo4JDAO.unlikeMediaContent(userId, mediaId);
+            neo4JDAO.unlikeAnime(userId, animeId);
         } catch (DAOException e) {
-            throw new BusinessException("Error while unliking media content.", e);
+            throw new BusinessException("Error while unliking the anime.", e);
         }
     }
 
-    /*@Override
-    public List<MediaContentDTO> getLikedMediaContents(String userId) throws BusinessException {
+    @Override
+    public void unlikeManga(String userId, String mangaId) throws BusinessException {
         try {
-            return neo4JDAO.getLikedMediaContents(userId);
+            neo4JDAO.unlikeManga(userId, mangaId);
         } catch (DAOException e) {
-            throw new BusinessException("Error while retrieving liked media contents.", e);
+            throw new BusinessException("Error while unliking the manga.", e);
         }
-    }*/
+    }
+
 
     @Override
     public List<AnimeDTO> getLikedAnime(String userId) throws BusinessException {
@@ -182,14 +193,6 @@
         }
     }
 
-    /*@Override
-    public List<Record> suggestMediaContents(String userId) throws BusinessException {
-        try {
-            return neo4JDAO.suggestMediaContents(userId);
-        } catch (DAOException e) {
-            throw new BusinessException("Error while suggesting media contents.", e);
-        }
-    }*/
 
     @Override
     public List<AnimeDTO> suggestAnime(String userId) throws BusinessException {
@@ -210,14 +213,6 @@
     }
 
 
-    /*@Override
-    public List<Record> getTrendByYear(int year) throws BusinessException {
-        try {
-            return neo4JDAO.getTrendByYear(year);
-        } catch (DAOException e) {
-            throw new BusinessException("Error while retrieving the trend.", e);
-        }
-    }*/
 
     @Override
     public List<AnimeDTO> getTrendAnimeByYear(int year) throws BusinessException {
@@ -237,15 +232,6 @@
         }
     }
 
-    /*@Override
-    public List<Record> getMediaContentByGenre(String genre) throws BusinessException {
-        try {
-            return neo4JDAO.getMediaContentByGenre(genre);
-        } catch (DAOException e) {
-            throw new BusinessException("Error while getting media content by genre.", e);
-        }
-
-    }*/
 
     @Override
     public List<AnimeDTO> getAnimeByGenre(String genre) throws BusinessException {
@@ -267,45 +253,9 @@
 
     }
 
-    /*@Override
-    public List<Record> suggestMediaContentByGenre(String userId) throws BusinessException {
-        try {
-            return neo4JDAO.suggestMediaContentByGenre(userId);
-        } catch(DAOException e) {
-            throw new BusinessException("Error while suggesting media content by genre.", e);
-        }
-    }*/
-
-    @Override
-    public List<AnimeDTO> suggestAnimeByGenre(String userId) throws BusinessException {
-        try {
-            return neo4JDAO.suggestAnimeByGenre(userId);
-        } catch(DAOException e) {
-            throw new BusinessException("Error while suggesting anime by genre.", e);
-        }
-    }
 
     @Override
-    public List<MangaDTO> suggestMangaByGenre(String userId) throws BusinessException {
-        try {
-            return neo4JDAO.suggestMangaByGenre(userId);
-        } catch(DAOException e) {
-            throw new BusinessException("Error while suggesting manga by genre.", e);
-        }
-    }
-
-    //Show the trends of the genres for year
-    /*@Override
-    public List<Record> getGenresTrendByYear(int year) throws BusinessException {
-        try {
-            return neo4JDAO.getGenresTrendByYear(year);
-        } catch (DAOException e) {
-            throw new BusinessException("Error while retrieving the trend.", e);
-        }
-    }*/
-
-    @Override
-    public List<List<String>> getAnimeGenresTrendByYear(int year) throws BusinessException {
+    public List<String> getAnimeGenresTrendByYear(int year) throws BusinessException {
         try {
             return neo4JDAO.getAnimeGenresTrendByYear(year);
         } catch (DAOException e) {
@@ -314,7 +264,7 @@
     }
 
     @Override
-    public List<List<String>> getMangaGenresTrendByYear(int year) throws BusinessException {
+    public List<String> getMangaGenresTrendByYear(int year) throws BusinessException {
         try {
             return neo4JDAO.getMangaGenresTrendByYear(year);
         } catch (DAOException e) {
@@ -323,14 +273,6 @@
     }
 
 
-    /*@Override
-    public List<Record> getTrendByGenre() throws BusinessException {
-        try {
-            return neo4JDAO.getTrendByGenre();
-        } catch(Exception e) {
-            throw new BusinessException("Error while retrieving the trend.", e);
-        }
-    }*/
 
     @Override
     public List<AnimeDTO> getAnimeTrendByGenre() throws BusinessException {
@@ -350,15 +292,6 @@
         }
     }
 
-    //Show the trends of the likes in general
-    /*@Override
-    public List<Record> getTrendByLikes() throws BusinessException {
-        try {
-            return neo4JDAO.getTrendByLikes();
-        } catch(Exception e) {
-            throw new BusinessException("Error while retrieving the trend.", e);
-        }
-    }*/
 
     @Override
     public List<AnimeDTO> getAnimeTrendByLikes() throws BusinessException {
@@ -378,18 +311,9 @@
         }
     }
 
-    //Show the trends of the genres in general
-    /*@Override
-    public List<Record> getGenresTrend() throws BusinessException {
-        try {
-            return neo4JDAO.getGenresTrend();
-        } catch (Exception e) {
-            throw new BusinessException("Error while retrieving the trend.", e);
-        }
-    }*/
 
     @Override
-    public List<List<String>> getAnimeGenresTrend() throws BusinessException {
+    public List<String> getAnimeGenresTrend() throws BusinessException {
         try {
             return neo4JDAO.getAnimeGenresTrend();
         } catch (Exception e) {
@@ -398,7 +322,7 @@
     }
 
     @Override
-    public List<List<String>> getMangaGenresTrend() throws BusinessException {
+    public List<String> getMangaGenresTrend() throws BusinessException {
         try {
             return neo4JDAO.getMangaGenresTrend();
         } catch (Exception e) {
Index: src/main/java/it/unipi/lsmsd/fnf/service/MediaContentService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.lsmsd.fnf.service;\r\n\r\nimport it.unipi.lsmsd.fnf.dto.PageDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.AnimeDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.MangaDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.MediaContentDTO;\r\nimport it.unipi.lsmsd.fnf.model.enums.MediaContentType;\r\nimport it.unipi.lsmsd.fnf.model.mediaContent.MediaContent;\r\nimport it.unipi.lsmsd.fnf.service.exception.BusinessException;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic interface MediaContentService {\r\n    void addMediaContent(MediaContent mediaContent) throws BusinessException;\r\n    void updateMediaContent(MediaContent mediaContent) throws BusinessException;\r\n    void removeMediaContent(String id, MediaContentType type) throws BusinessException;\r\n    MediaContent getMediaContentById(String id, MediaContentType type) throws BusinessException;\r\n    PageDTO<? extends MediaContentDTO> searchByFilter(Map<String, Object> filters, Map<String, Integer> orderBy, int page, MediaContentType type) throws BusinessException;\r\n    PageDTO<? extends MediaContentDTO> searchByTitle(String title, int page, MediaContentType type) throws BusinessException;\r\n    void likeMediaContent(String userId, String mediaId) throws BusinessException;\r\n    void unlikeMediaContent(String userId, String mediaId) throws BusinessException;\r\n    //List<MediaContentDTO> getLikedMediaContents(String userId) throws BusinessException;\r\n\r\n    List<AnimeDTO> getLikedAnime(String userId) throws BusinessException;\r\n\r\n    List<MangaDTO> getLikedManga(String userId) throws BusinessException;\r\n\r\n    //List<Record> suggestMediaContents(String userId) throws BusinessException;\r\n\r\n    List<AnimeDTO> suggestAnime(String userId) throws BusinessException;\r\n\r\n    List<MangaDTO> suggestManga(String userId) throws BusinessException;\r\n\r\n    //List<Record> getTrendByYear(int year) throws BusinessException;\r\n\r\n    List<AnimeDTO> getTrendAnimeByYear(int year) throws BusinessException;\r\n\r\n    List<MangaDTO> getTrendMangaByYear(int year) throws BusinessException;\r\n\r\n    //List<Record> getMediaContentByGenre(String genre) throws BusinessException;\r\n\r\n    List<AnimeDTO> getAnimeByGenre(String genre) throws BusinessException;\r\n\r\n    List<MangaDTO> getMangaByGenre(String genre) throws BusinessException;\r\n\r\n    //List<Record> suggestMediaContentByGenre(String userId) throws BusinessException;\r\n\r\n    List<AnimeDTO> suggestAnimeByGenre(String userId) throws BusinessException;\r\n\r\n    List<MangaDTO> suggestMangaByGenre(String userId) throws BusinessException;\r\n\r\n    //Show the trends of the genres for year\r\n    //List<Record> getGenresTrendByYear(int year) throws BusinessException;\r\n\r\n    List<List<String>> getAnimeGenresTrendByYear(int year) throws BusinessException;\r\n\r\n    List<List<String>> getMangaGenresTrendByYear(int year) throws BusinessException;\r\n\r\n    //List<Record> getTrendByGenre() throws BusinessException;\r\n\r\n    List<AnimeDTO> getAnimeTrendByGenre() throws BusinessException;\r\n\r\n    List<MangaDTO> getMangaTrendByGenre() throws BusinessException;\r\n\r\n    //Show the trends of the likes in general\r\n    //List<Record> getTrendByLikes() throws BusinessException;\r\n\r\n    List<AnimeDTO> getAnimeTrendByLikes() throws BusinessException;\r\n\r\n    List<MangaDTO> getMangaTrendByLikes() throws BusinessException;\r\n\r\n    //Show the trends of the genres in general\r\n    //List<Record> getGenresTrend() throws BusinessException;\r\n\r\n    List<List<String>> getAnimeGenresTrend() throws BusinessException;\r\n\r\n    List<List<String>> getMangaGenresTrend() throws BusinessException;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/lsmsd/fnf/service/MediaContentService.java b/src/main/java/it/unipi/lsmsd/fnf/service/MediaContentService.java
--- a/src/main/java/it/unipi/lsmsd/fnf/service/MediaContentService.java	(revision 31d1c7c14f1c424a4f510c3f0936c0bdc0c8d2ec)
+++ b/src/main/java/it/unipi/lsmsd/fnf/service/MediaContentService.java	(date 1707781823193)
@@ -18,62 +18,51 @@
     MediaContent getMediaContentById(String id, MediaContentType type) throws BusinessException;
     PageDTO<? extends MediaContentDTO> searchByFilter(Map<String, Object> filters, Map<String, Integer> orderBy, int page, MediaContentType type) throws BusinessException;
     PageDTO<? extends MediaContentDTO> searchByTitle(String title, int page, MediaContentType type) throws BusinessException;
-    void likeMediaContent(String userId, String mediaId) throws BusinessException;
-    void unlikeMediaContent(String userId, String mediaId) throws BusinessException;
-    //List<MediaContentDTO> getLikedMediaContents(String userId) throws BusinessException;
+    void likeAnime(String userId, String animeId) throws BusinessException;
+    void likeManga(String userId, String mangaId) throws BusinessException;
+    void unlikeAnime(String userId, String animeId) throws BusinessException;
+    void unlikeManga(String userId, String mangaId) throws BusinessException;
 
     List<AnimeDTO> getLikedAnime(String userId) throws BusinessException;
 
     List<MangaDTO> getLikedManga(String userId) throws BusinessException;
 
-    //List<Record> suggestMediaContents(String userId) throws BusinessException;
 
     List<AnimeDTO> suggestAnime(String userId) throws BusinessException;
 
     List<MangaDTO> suggestManga(String userId) throws BusinessException;
 
-    //List<Record> getTrendByYear(int year) throws BusinessException;
 
     List<AnimeDTO> getTrendAnimeByYear(int year) throws BusinessException;
 
     List<MangaDTO> getTrendMangaByYear(int year) throws BusinessException;
 
-    //List<Record> getMediaContentByGenre(String genre) throws BusinessException;
 
     List<AnimeDTO> getAnimeByGenre(String genre) throws BusinessException;
 
     List<MangaDTO> getMangaByGenre(String genre) throws BusinessException;
 
-    //List<Record> suggestMediaContentByGenre(String userId) throws BusinessException;
-
-    List<AnimeDTO> suggestAnimeByGenre(String userId) throws BusinessException;
-
-    List<MangaDTO> suggestMangaByGenre(String userId) throws BusinessException;
 
     //Show the trends of the genres for year
-    //List<Record> getGenresTrendByYear(int year) throws BusinessException;
 
-    List<List<String>> getAnimeGenresTrendByYear(int year) throws BusinessException;
+    List<String> getAnimeGenresTrendByYear(int year) throws BusinessException;
 
-    List<List<String>> getMangaGenresTrendByYear(int year) throws BusinessException;
+    List<String> getMangaGenresTrendByYear(int year) throws BusinessException;
 
-    //List<Record> getTrendByGenre() throws BusinessException;
 
     List<AnimeDTO> getAnimeTrendByGenre() throws BusinessException;
 
     List<MangaDTO> getMangaTrendByGenre() throws BusinessException;
 
     //Show the trends of the likes in general
-    //List<Record> getTrendByLikes() throws BusinessException;
 
     List<AnimeDTO> getAnimeTrendByLikes() throws BusinessException;
 
     List<MangaDTO> getMangaTrendByLikes() throws BusinessException;
 
     //Show the trends of the genres in general
-    //List<Record> getGenresTrend() throws BusinessException;
 
-    List<List<String>> getAnimeGenresTrend() throws BusinessException;
+    List<String> getAnimeGenresTrend() throws BusinessException;
 
-    List<List<String>> getMangaGenresTrend() throws BusinessException;
+    List<String> getMangaGenresTrend() throws BusinessException;
 }
Index: src/main/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.lsmsd.fnf.dao.neo4j;\r\n\r\nimport it.unipi.lsmsd.fnf.dao.Neo4JDAO;\r\nimport it.unipi.lsmsd.fnf.dao.base.BaseNeo4JDAO;\r\nimport it.unipi.lsmsd.fnf.dao.exception.DAOException;\r\nimport it.unipi.lsmsd.fnf.dto.RegisteredUserDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.AnimeDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.MangaDTO;\r\nimport org.bson.types.ObjectId;\r\nimport org.neo4j.driver.*;\r\nimport org.neo4j.driver.Record;\r\nimport org.neo4j.driver.types.Node;\r\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static org.neo4j.driver.Values.parameters;\r\n\r\npublic class Neo4JDAOImpl extends BaseNeo4JDAO implements Neo4JDAO {\r\n\r\n    //like a media content OK\r\n    @Override\r\n    public void likeMediaContent(String userId, String mediaId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (u:User {id: $userId}), (m:MediaContent {id: $mediaId}) \" +\r\n                            \"MERGE (u)-[r:LIKE]->(m) \" +\r\n                            \"SET r.date = datetime() \";\r\n            session.run(query, Map.of(\"userId\", userId, \"mediaId\", mediaId));\r\n\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n\r\n    }\r\n\r\n    //follow a user OK\r\n    @Override\r\n    public void followUser(String followerUserId, String followingUserId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (follower:User {id: $followerUserId}), (following:User {id: $followingUserId}) \" +\r\n                            \"MERGE (follower)-[r:FOLLOWS]->(following) \";\r\n            session.run(query, Map.of(\"followerUserId\", followerUserId, \"followingUserId\", followingUserId));\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    // unlike a media content OK\r\n    @Override\r\n    public void unlikeMediaContent(String userId, String mediaId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (u:User {id: $userId})-[r:LIKE]->(m:MediaContent {id: $mediaId}) DELETE r\";\r\n            session.run(query, Map.of(\"userId\", userId, \"mediaId\", mediaId));\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    // unfollow a user OK\r\n    @Override\r\n    public void unfollowUser(String followerUserId, String followingUserId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (follower:User {id: $followerUserId})-[r:FOLLOWS]->(following:User {id: $followingUserId}) DELETE r\";\r\n            session.run(query, Map.of(\"followerUserId\", followerUserId, \"followingUserId\", followingUserId));\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //show list of liked media content\r\n\r\n    //OK\r\n    @Override\r\n    public List<AnimeDTO> getLikedAnime(String userId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (u:User {id: $userId})-[:LIKE]->(m:MediaContent {type: 'anime'}) RETURN m\";\r\n            List<Record> records = session.run(query, Map.of(\"userId\", userId)).list();\r\n            List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());\r\n            return  list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n\r\n    private AnimeDTO recordToAnimeDTO(Record record) {\r\n        Map<String, Object> map = record.get(0).asMap();\r\n        return new AnimeDTO(new ObjectId(String.valueOf(map.get(\"id\"))), (String)map.get(\"title\"), (String)map.get(\"picture\"));\r\n    }\r\n\r\n    //OK\r\n    @Override\r\n    public List<MangaDTO> getLikedManga(String userId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (u:User {id: $userId})-[:LIKE]->(m:MediaContent {type: 'manga'}) RETURN m\";\r\n            List<Record> records = session.run(query, Map.of(\"userId\", userId)).list();\r\n            List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    private MangaDTO recordToMangaDTO(Record record) {\r\n        Map<String, Object> map = record.get(0).asMap();\r\n        return new MangaDTO(new ObjectId(String.valueOf(map.get(\"id\"))), (String)map.get(\"title\"), (String)map.get(\"picture\"));\r\n    }\r\n\r\n\r\n    //show list of following and followers OK\r\n    @Override\r\n    public List<RegisteredUserDTO> getFollowing(String userId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (follower:User {id: $userId})-[:FOLLOWS]-(following:User) RETURN following\";\r\n            List<Record> records = session.run(query, Map.of(\"userId\", userId)).list();\r\n            List<RegisteredUserDTO> list = records.stream()\r\n                    .map(this::recordToRegisteredUserDTO)\r\n                    .collect(Collectors.toList());\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n\r\n    private RegisteredUserDTO recordToRegisteredUserDTO(Record record) {\r\n        Map<String, Object> map = record.get(0).asMap();\r\n        return new RegisteredUserDTO(new ObjectId(String.valueOf(map.get(\"id\"))), (String) map.get(\"username\"), (String) map.get(\"picture\"));\r\n    }\r\n\r\n    //OK\r\n    @Override\r\n    public List<RegisteredUserDTO> getFollowers(String userId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (follower:User)-[:FOLLOWS]->(following:User {id: $userId}) RETURN follower\";\r\n            List<Record> records = session.run(query, Map.of(\"userId\", userId)).list();\r\n            List<RegisteredUserDTO> list = records.stream().map(this::recordToRegisteredUserDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    //Suggest users based on common following OK\r\n    @Override\r\n    public List<RegisteredUserDTO> suggestUsers(String userId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (:User {id: $userId})-[:FOLLOWS]->(following:User)-[:FOLLOWS]->(suggested:User) \" +\r\n                    \"WHERE NOT (:User{id: $userId})-[:FOLLOWS]->(suggested) \" +\r\n                    \"WITH suggested, COUNT(DISTINCT following) AS commonFollowers \" +\r\n                    \"WHERE commonFollowers > 5 \" +\r\n                    \"RETURN suggested \" +\r\n                    \"LIMIT 5\";\r\n            List<Record> records = session.run(query, Map.of(\"userId\", userId)).list();\r\n            List<RegisteredUserDTO> list = records.stream().map(this::recordToRegisteredUserDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //suggest to a user 5 media contents based on the likes of his following:\r\n    //if more than 1 following has liked that media content, show it;\r\n\r\n    //OK\r\n    @Override\r\n    public List<AnimeDTO> suggestAnime(String userId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (u:User {id: $userId})-[:FOLLOWS]->(f:User)-[:LIKE]->(m:MediaContent {type: 'anime'}) \" +\r\n                    \"WITH m, count(f) AS num_likes \" +\r\n                    \"WHERE num_likes > 1 \" +\r\n                    \"RETURN m \" +\r\n                    \"LIMIT 5\";\r\n            List<Record> records = session.run(query, Map.of(\"userId\", userId)).list();\r\n            List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n\r\n    }\r\n\r\n    //OK\r\n    @Override\r\n    public List<MangaDTO> suggestManga(String userId) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (u:User {id: $userId})-[:FOLLOWS]->(f:User)-[:LIKE]->(m:MediaContent {type: 'manga'}) \" +\r\n                    \"WITH m, count(f) AS num_likes \" +\r\n                    \"WHERE num_likes > 1 \" +\r\n                    \"RETURN m \" +\r\n                    \"LIMIT 5\";\r\n            List<Record> records = session.run(query, Map.of(\"userId\", userId)).list();\r\n            List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n\r\n    }\r\n\r\n    //What are the most liked media contents for each year?\r\n    //OK\r\n    @Override\r\n    public List<AnimeDTO> getTrendAnimeByYear(int year) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String startDate = year + \"-01-01\";\r\n            String endDate = year + \"-12-31\";\r\n            String query = \"MATCH (m:MediaContent {type: 'anime'})<-[r:LIKE]-(u:User)\\n\" +\r\n                    \"WHERE r.date >= $startDate AND r.date < $endDate\\n\" +\r\n                    \"WITH m, count(u) AS numLikes \\n\" +\r\n                    \"RETURN m, numLikes \\n\" +\r\n                    \"ORDER BY numLikes DESC\\n\" +\r\n                    \"LIMIT 5\";\r\n            List<Record> records = session.run(query, Map.of(\"startDate\", startDate, \"endDate\", endDate)).list();\r\n            List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    //OK\r\n    @Override\r\n    public List<MangaDTO> getTrendMangaByYear(int year) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String startDate = year + \"-01-01\";\r\n            String endDate = year + \"-12-31\";\r\n            String query = \"MATCH (m:MediaContent {type: 'manga'})<-[r:LIKE]-(u:User)\\n\" +\r\n                    \"WHERE r.date >= $startDate AND r.date < $endDate\\n\" +\r\n                    \"WITH m, count(u) AS numLikes \\n\" +\r\n                    \"RETURN m, numLikes \\n\" +\r\n                    \"ORDER BY numLikes DESC\\n\" +\r\n                    \"LIMIT 5\";\r\n            List<Record> records = session.run(query, Map.of(\"startDate\", startDate, \"endDate\", endDate)).list();\r\n            List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    // To show the media contents with a certain genre\r\n    //OK\r\n    @Override\r\n    public List<AnimeDTO> getAnimeByGenre(String genre) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (m:MediaContent {type: 'anime'})-[:BELONGS_TO]->(g:Genre {name: $genre}) \" +\r\n                            \"RETURN m \" +\r\n                            \"LIMIT 10\";\r\n            List<Record> records =  session.run(query, Map.of(\"genre\", genre)).list();\r\n            List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    //OK\r\n    @Override\r\n    public List<MangaDTO> getMangaByGenre(String genre) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (m:MediaContent {type: 'manga'})-[:BELONGS_TO]->(g:Genre {name: $genre}) \" +\r\n                            \"RETURN m \" +\r\n                            \"LIMIT 10\";\r\n            List<Record> records =  session.run(query, Map.of(\"genre\", genre)).list();\r\n            List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    //Suggest the media content based on the most liked genres of a user (not implemented)\r\n\r\n\r\n    //Show the trends of the genres for year\r\n\r\n    //OK\r\n    @Override\r\n    public List<List<String>> getAnimeGenresTrendByYear(int year) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String startDate = year + \"-01-01\";\r\n            String endDate = year + \"-12-31\";\r\n            String query = \"MATCH (m:MediaContent {type: 'anime'})<-[r:LIKE]-(u:User)\\n\" +\r\n                    \"WHERE r.date >= $startDate AND r.date < $endDate\\n\" +\r\n                    \"WITH m, count(u) AS numLikes\\n\" +\r\n                    \"ORDER BY numLikes DESC\\n\" +\r\n                    \"MATCH (m)-[b:BELONGS_TO]->(g:Genre)\\n\" +\r\n                    \"WITH collect(g.name) AS genreNames\\n\" +\r\n                    \"RETURN genreNames[..10] AS genreNames\\n\";\r\n\r\n            List<Record> records = session.run(query, Map.of(\"startDate\", startDate, \"endDate\", endDate)).list();\r\n\r\n            List<List<String>> genreNamesLists = records.stream()\r\n                    .map(this::recordToGenreNames)\r\n                    .collect(Collectors.toList());\r\n\r\n            return genreNamesLists;\r\n\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n\r\n    private List<String> recordToGenreNames(Record record) {\r\n        List<String> genreNames = new ArrayList<>();\r\n        List<Object> genreNameObjects = record.get(\"genreNames\").asList();\r\n\r\n        genreNameObjects.stream()\r\n                .filter(Objects::nonNull) // Filtra i valori NULL\r\n                .map(Object::toString)\r\n                .forEach(genreNames::add);\r\n\r\n        return genreNames;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //OK\r\n    @Override\r\n    public List<List<String>> getMangaGenresTrendByYear(int year) throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String startDate = year + \"-01-01\";\r\n            String endDate = year + \"-12-31\";\r\n            String query = \"MATCH (m:MediaContent {type: 'manga'})<-[r:LIKE]-(u:User)\\n\" +\r\n                    \"WHERE r.date >= $startDate AND r.date < $endDate\\n\" +\r\n                    \"WITH m, count(u) AS numLikes\\n\" +\r\n                    \"ORDER BY numLikes DESC\\n\" +\r\n                    \"MATCH (m)-[b:BELONGS_TO]->(g:Genre)\\n\" +\r\n                    \"WITH collect(g.name) AS genreNames\\n\" +\r\n                    \"RETURN genreNames[..10] AS genreNames\\n\";\r\n\r\n            List<Record> records = session.run(query, Map.of(\"startDate\", startDate, \"endDate\", endDate)).list();\r\n\r\n            List<List<String>> genreNamesLists = records.stream()\r\n                    .map(this::recordToGenreNames)\r\n                    .collect(Collectors.toList());\r\n\r\n            return genreNamesLists;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    //Suggest media contents based on the top 3 genres that appear the most\r\n\r\n    //OK\r\n    @Override\r\n    public List<AnimeDTO> getAnimeTrendByGenre() throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (m:MediaContent {type: 'anime'})-[:BELONGS_TO]->(g:Genre)\\n\" +\r\n                            \"WITH m, COUNT(m) as numMediaContents \\n\" +\r\n                            \"ORDER BY numMediaContents DESC\\n\" +\r\n                            \"RETURN m\\n\" +\r\n                            \"LIMIT 5\";\r\n            List<Record> records = session.run(query).list();\r\n            List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch(Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    //IDK\r\n    @Override\r\n    public List<MangaDTO> getMangaTrendByGenre() throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (m:MediaContent {type: 'manga'})-[:BELONGS_TO]->(g:Genre)\\n\" +\r\n                            \"WITH m, COUNT(m) as numMediaContents \\n\" +\r\n                            \"ORDER BY numMediaContents DESC\\n\" +\r\n                            \"RETURN m\\n\" +\r\n                            \"LIMIT 5\";\r\n            List<Record> records = session.run(query).list();\r\n            List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch(Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    //Show the trends of the likes in general\r\n\r\n    //IDK\r\n    @Override\r\n    public List<AnimeDTO> getAnimeTrendByLikes() throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (u:User)-[r:LIKE]->(m:MediaContent {type: 'anime'}) \" +\r\n                            \"WITH m, COUNT(r) as numLikes \" +\r\n                            \"ORDER BY numLikes DESC \" +\r\n                            \"RETURN m, numLikes \" +\r\n                            \"LIMIT 5\";\r\n            List<Record> records = session.run(query).list();\r\n            List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch(Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n\r\n    //IDK\r\n    @Override\r\n    public List<MangaDTO> getMangaTrendByLikes() throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (u:User)-[r:LIKE]->(m:MediaContent {type: 'manga'}) \" +\r\n                            \"WITH m, COUNT(r) as numLikes \" +\r\n                            \"ORDER BY numLikes DESC \" +\r\n                            \"RETURN m, numLikes \" +\r\n                            \"LIMIT 5\";\r\n            List<Record> records = session.run(query).list();\r\n            List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());\r\n            return list;\r\n        } catch(Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    //Show the trends of the genres in general\r\n\r\n    //OK\r\n    @Override\r\n    public List<List<String>> getAnimeGenresTrend() throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (m:MediaContent {type: 'anime'})<-[r:LIKE]-(u:User)\\n\" +\r\n                            \"WITH m, count(u) AS numLikes\\n\" +\r\n                            \"ORDER BY numLikes DESC\\n\" +\r\n                            \"MATCH (m)-[b:BELONGS_TO]->(g:Genre)\\n\" +\r\n                            \"WITH collect(g.name) AS genreNames\\n\" +\r\n                            \"RETURN genreNames[..10] AS genreNames\";\r\n            List<Record> records = session.run(query).list();\r\n            List<List<String>> genreNamesLists = records.stream()\r\n                    .map(this::recordToGenreNames)\r\n                    .collect(Collectors.toList());\r\n\r\n            return genreNamesLists;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n    //OK\r\n    @Override\r\n    public List<List<String>> getMangaGenresTrend() throws DAOException {\r\n        try (Session session = getSession()) {\r\n            String query = \"MATCH (m:MediaContent {type: 'manga'})<-[r:LIKE]-(u:User)\\n\" +\r\n                            \"WITH m, count(u) AS numLikes\\n\" +\r\n                            \"ORDER BY numLikes DESC\\n\" +\r\n                            \"MATCH (m)-[b:BELONGS_TO]->(g:Genre)\\n\" +\r\n                            \"WITH collect(g.name) AS genreNames\\n\" +\r\n                            \"RETURN genreNames[..10] AS genreNames\";\r\n            List<Record> records = session.run(query).list();\r\n            List<List<String>> genreNamesLists = records.stream()\r\n                    .map(this::recordToGenreNames)\r\n                    .collect(Collectors.toList());\r\n\r\n            return genreNamesLists;\r\n        } catch (Exception e) {\r\n            throw new DAOException(e);\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImpl.java b/src/main/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImpl.java
--- a/src/main/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImpl.java	(revision 31d1c7c14f1c424a4f510c3f0936c0bdc0c8d2ec)
+++ b/src/main/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImpl.java	(date 1707781823179)
@@ -24,12 +24,25 @@
 
     //like a media content OK
     @Override
-    public void likeMediaContent(String userId, String mediaId) throws DAOException {
+    public void likeAnime(String userId, String animeId) throws DAOException {
+        try (Session session = getSession()) {
+            String query = "MATCH (u:User {id: $userId}), (a: Anime) " +
+                            "MERGE (u)-[r:LIKE]->(a) " +
+                            "SET r.date = datetime() ";
+            session.run(query, Map.of("userId", userId, "animeId", animeId));
+
+        } catch (Exception e) {
+            throw new DAOException(e);
+        }
+
+    }
+    @Override
+    public void likeManga(String userId, String mangaId) throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (u:User {id: $userId}), (m:MediaContent {id: $mediaId}) " +
-                            "MERGE (u)-[r:LIKE]->(m) " +
-                            "SET r.date = datetime() ";
-            session.run(query, Map.of("userId", userId, "mediaId", mediaId));
+            String query = "MATCH (u:User {id: $userId}), (m:Manga) " +
+                    "MERGE (u)-[r:LIKE]->(m) " +
+                    "SET r.date = datetime() ";
+            session.run(query, Map.of("userId", userId, "mangaId", mangaId));
 
         } catch (Exception e) {
             throw new DAOException(e);
@@ -51,10 +64,20 @@
 
     // unlike a media content OK
     @Override
-    public void unlikeMediaContent(String userId, String mediaId) throws DAOException {
+    public void unlikeAnime(String userId, String animeId) throws DAOException {
+        try (Session session = getSession()) {
+            String query = "MATCH (u:User {id: $userId})-[r:LIKE]->(a: Anime {id: $animeId}) DELETE r";
+            session.run(query, Map.of("userId", userId, "animeId", animeId));
+        } catch (Exception e) {
+            throw new DAOException(e);
+        }
+    }
+
+    @Override
+    public void unlikeManga(String userId, String mangaId) throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (u:User {id: $userId})-[r:LIKE]->(m:MediaContent {id: $mediaId}) DELETE r";
-            session.run(query, Map.of("userId", userId, "mediaId", mediaId));
+            String query = "MATCH (u:User {id: $userId})-[r:LIKE]->(m:Manga {id: $mangaId}) DELETE r";
+            session.run(query, Map.of("userId", userId, "mangaId", mangaId));
         } catch (Exception e) {
             throw new DAOException(e);
         }
@@ -78,7 +101,7 @@
     @Override
     public List<AnimeDTO> getLikedAnime(String userId) throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (u:User {id: $userId})-[:LIKE]->(m:MediaContent {type: 'anime'}) RETURN m";
+            String query = "MATCH (u:User {id: $userId})-[:LIKE]->(a:Anime) RETURN a.id as id, a.title as title, a.picture as picture";
             List<Record> records = session.run(query, Map.of("userId", userId)).list();
             List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());
             return  list;
@@ -88,8 +111,20 @@
     }
 
 
+
     private AnimeDTO recordToAnimeDTO(Record record) {
-        Map<String, Object> map = record.get(0).asMap();
+        Map<String, Object> map = record.asMap();
+        AnimeDTO animeDTO = new AnimeDTO();
+        animeDTO.setId(new ObjectId(String.valueOf(map.get("id"))));
+        animeDTO.setTitle(String.valueOf(map.get("title")));
+        if(map.get("picture") != null) {
+            animeDTO.setImageUrl((String)map.get("picture"));
+        }
+        if(map.get("numLikes") != null) {
+            animeDTO.setNumLikes(((Long) map.get("numLikes")).intValue());
+        }
+
+        System.out.println(map);
         return new AnimeDTO(new ObjectId(String.valueOf(map.get("id"))), (String)map.get("title"), (String)map.get("picture"));
     }
 
@@ -97,7 +132,7 @@
     @Override
     public List<MangaDTO> getLikedManga(String userId) throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (u:User {id: $userId})-[:LIKE]->(m:MediaContent {type: 'manga'}) RETURN m";
+            String query = "MATCH (u:User {id: $userId})-[:LIKE]->(m:Manga) RETURN m.id as id, m.title as title, m.picture as picture";
             List<Record> records = session.run(query, Map.of("userId", userId)).list();
             List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());
             return list;
@@ -107,7 +142,17 @@
     }
 
     private MangaDTO recordToMangaDTO(Record record) {
-        Map<String, Object> map = record.get(0).asMap();
+        Map<String, Object> map = record.asMap();
+        MangaDTO mangaDTO = new MangaDTO();
+        mangaDTO.setId(new ObjectId(String.valueOf(map.get("id"))));
+        mangaDTO.setTitle(String.valueOf(map.get("title")));
+        if(map.get("picture") != null) {
+            mangaDTO.setImageUrl((String)map.get("picture"));
+        }
+        if(map.get("numLikes") != null) {
+            mangaDTO.setNumLikes(((Long) map.get("numLikes")).intValue());
+        }
+        System.out.println(map);
         return new MangaDTO(new ObjectId(String.valueOf(map.get("id"))), (String)map.get("title"), (String)map.get("picture"));
     }
 
@@ -173,10 +218,11 @@
     @Override
     public List<AnimeDTO> suggestAnime(String userId) throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (u:User {id: $userId})-[:FOLLOWS]->(f:User)-[:LIKE]->(m:MediaContent {type: 'anime'}) " +
-                    "WITH m, count(f) AS num_likes " +
-                    "WHERE num_likes > 1 " +
-                    "RETURN m " +
+            String query = "MATCH (u:User {id: $userId})-[:FOLLOWS]->(f:User)-[:LIKE]->(a:Anime)\n" +
+                    "WHERE u <> f  \n" +
+                    "WITH a, count(f) AS num_likes\n" +
+                    "ORDER BY num_likes DESC\n" +
+                    "RETURN a.id as id, a.title as title, a.picture as picture\n" +
                     "LIMIT 5";
             List<Record> records = session.run(query, Map.of("userId", userId)).list();
             List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());
@@ -191,10 +237,11 @@
     @Override
     public List<MangaDTO> suggestManga(String userId) throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (u:User {id: $userId})-[:FOLLOWS]->(f:User)-[:LIKE]->(m:MediaContent {type: 'manga'}) " +
-                    "WITH m, count(f) AS num_likes " +
-                    "WHERE num_likes > 1 " +
-                    "RETURN m " +
+            String query = "MATCH (u:User {id: $userId})-[:FOLLOWS]->(f:User)-[:LIKE]->(m:Manga)\n" +
+                    "WHERE u <> f  \n" +
+                    "WITH m, count(f) AS num_likes\n" +
+                    "ORDER BY num_likes DESC\n" +
+                    "RETURN m.id as id, m.title as title, m.picture as picture\n" +
                     "LIMIT 5";
             List<Record> records = session.run(query, Map.of("userId", userId)).list();
             List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());
@@ -206,16 +253,16 @@
     }
 
     //What are the most liked media contents for each year?
-    //OK
+    //OK CONTINUE CHECK FROM HERE
     @Override
     public List<AnimeDTO> getTrendAnimeByYear(int year) throws DAOException {
         try (Session session = getSession()) {
             String startDate = year + "-01-01";
             String endDate = year + "-12-31";
-            String query = "MATCH (m:MediaContent {type: 'anime'})<-[r:LIKE]-(u:User)\n" +
+            String query = "MATCH (a: Anime)<-[r:LIKE]-(u:User)\n" +
                     "WHERE r.date >= $startDate AND r.date < $endDate\n" +
-                    "WITH m, count(u) AS numLikes \n" +
-                    "RETURN m, numLikes \n" +
+                    "WITH a, count(u) AS numLikes \n" +
+                    "RETURN a.id as id, a.title as title, numLikes \n" +
                     "ORDER BY numLikes DESC\n" +
                     "LIMIT 5";
             List<Record> records = session.run(query, Map.of("startDate", startDate, "endDate", endDate)).list();
@@ -232,10 +279,10 @@
         try (Session session = getSession()) {
             String startDate = year + "-01-01";
             String endDate = year + "-12-31";
-            String query = "MATCH (m:MediaContent {type: 'manga'})<-[r:LIKE]-(u:User)\n" +
+            String query = "MATCH (m:Manga)<-[r:LIKE]-(u:User)\n" +
                     "WHERE r.date >= $startDate AND r.date < $endDate\n" +
                     "WITH m, count(u) AS numLikes \n" +
-                    "RETURN m, numLikes \n" +
+                    "RETURN m.id as id, m.title as title, numLikes \n" +
                     "ORDER BY numLikes DESC\n" +
                     "LIMIT 5";
             List<Record> records = session.run(query, Map.of("startDate", startDate, "endDate", endDate)).list();
@@ -247,12 +294,12 @@
     }
 
     // To show the media contents with a certain genre
-    //OK
+    //OK CONTINUE CHECK
     @Override
     public List<AnimeDTO> getAnimeByGenre(String genre) throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (m:MediaContent {type: 'anime'})-[:BELONGS_TO]->(g:Genre {name: $genre}) " +
-                            "RETURN m " +
+            String query = "MATCH (a: Anime)-[:BELONGS_TO]->(g:Genre {name: $genre}) " +
+                            "RETURN a.id as id, a.title as title, a.picture as picture " +
                             "LIMIT 10";
             List<Record> records =  session.run(query, Map.of("genre", genre)).list();
             List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());
@@ -266,8 +313,8 @@
     @Override
     public List<MangaDTO> getMangaByGenre(String genre) throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (m:MediaContent {type: 'manga'})-[:BELONGS_TO]->(g:Genre {name: $genre}) " +
-                            "RETURN m " +
+            String query = "MATCH (m:Manga)-[:BELONGS_TO]->(g:Genre {name: $genre}) " +
+                            "RETURN m.id as id, m.title as title, m.picture as picture " +
                             "LIMIT 10";
             List<Record> records =  session.run(query, Map.of("genre", genre)).list();
             List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());
@@ -282,27 +329,30 @@
 
     //Show the trends of the genres for year
 
-    //OK
+    //OK CHECK list di list di string e trasformare in list di string
     @Override
-    public List<List<String>> getAnimeGenresTrendByYear(int year) throws DAOException {
+    public List<String> getAnimeGenresTrendByYear(int year) throws DAOException {
         try (Session session = getSession()) {
             String startDate = year + "-01-01";
             String endDate = year + "-12-31";
-            String query = "MATCH (m:MediaContent {type: 'anime'})<-[r:LIKE]-(u:User)\n" +
+            String query = "MATCH (a: Anime)<-[r:LIKE]-(u:User)\n" +
                     "WHERE r.date >= $startDate AND r.date < $endDate\n" +
-                    "WITH m, count(u) AS numLikes\n" +
+                    "WITH a, count(u) AS numLikes\n" +
                     "ORDER BY numLikes DESC\n" +
-                    "MATCH (m)-[b:BELONGS_TO]->(g:Genre)\n" +
+                    "MATCH (a)-[b:BELONGS_TO]->(g:Genre)\n" +
                     "WITH collect(g.name) AS genreNames\n" +
                     "RETURN genreNames[..10] AS genreNames\n";
 
             List<Record> records = session.run(query, Map.of("startDate", startDate, "endDate", endDate)).list();
 
-            List<List<String>> genreNamesLists = records.stream()
-                    .map(this::recordToGenreNames)
+
+            List<String> genreNames = records.stream()
+                    .flatMap(record -> record.get("genreNames").asList().stream())
+                    .filter(Objects::nonNull)
+                    .map(Object::toString)
                     .collect(Collectors.toList());
 
-            return genreNamesLists;
+            return genreNames;
 
         } catch (Exception e) {
             throw new DAOException(e);
@@ -310,12 +360,13 @@
     }
 
 
+
     private List<String> recordToGenreNames(Record record) {
         List<String> genreNames = new ArrayList<>();
         List<Object> genreNameObjects = record.get("genreNames").asList();
 
         genreNameObjects.stream()
-                .filter(Objects::nonNull) // Filtra i valori NULL
+                .filter(Objects::nonNull)
                 .map(Object::toString)
                 .forEach(genreNames::add);
 
@@ -330,11 +381,11 @@
 
     //OK
     @Override
-    public List<List<String>> getMangaGenresTrendByYear(int year) throws DAOException {
+    public List<String> getMangaGenresTrendByYear(int year) throws DAOException {
         try (Session session = getSession()) {
             String startDate = year + "-01-01";
             String endDate = year + "-12-31";
-            String query = "MATCH (m:MediaContent {type: 'manga'})<-[r:LIKE]-(u:User)\n" +
+            String query = "MATCH (m: Manga)<-[r:LIKE]-(u:User)\n" +
                     "WHERE r.date >= $startDate AND r.date < $endDate\n" +
                     "WITH m, count(u) AS numLikes\n" +
                     "ORDER BY numLikes DESC\n" +
@@ -344,11 +395,15 @@
 
             List<Record> records = session.run(query, Map.of("startDate", startDate, "endDate", endDate)).list();
 
-            List<List<String>> genreNamesLists = records.stream()
-                    .map(this::recordToGenreNames)
+
+            List<String> genreNames = records.stream()
+                    .flatMap(record -> record.get("genreNames").asList().stream())
+                    .filter(Objects::nonNull)
+                    .map(Object::toString)
                     .collect(Collectors.toList());
 
-            return genreNamesLists;
+            return genreNames;
+
         } catch (Exception e) {
             throw new DAOException(e);
         }
@@ -356,14 +411,14 @@
 
     //Suggest media contents based on the top 3 genres that appear the most
 
-    //OK
+    //????????
     @Override
     public List<AnimeDTO> getAnimeTrendByGenre() throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (m:MediaContent {type: 'anime'})-[:BELONGS_TO]->(g:Genre)\n" +
-                            "WITH m, COUNT(m) as numMediaContents \n" +
+            String query = "MATCH (a: Anime)-[:BELONGS_TO]->(g:Genre)\n" +
+                            "WITH a, COUNT(a) as numMediaContents \n" +
                             "ORDER BY numMediaContents DESC\n" +
-                            "RETURN m\n" +
+                            "RETURN a.id as id, a.title as title\n" +
                             "LIMIT 5";
             List<Record> records = session.run(query).list();
             List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());
@@ -373,14 +428,14 @@
         }
     }
 
-    //IDK
+    //?????
     @Override
     public List<MangaDTO> getMangaTrendByGenre() throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (m:MediaContent {type: 'manga'})-[:BELONGS_TO]->(g:Genre)\n" +
+            String query = "MATCH (m:Manga)-[:BELONGS_TO]->(g:Genre)\n" +
                             "WITH m, COUNT(m) as numMediaContents \n" +
                             "ORDER BY numMediaContents DESC\n" +
-                            "RETURN m\n" +
+                            "RETURN m.id as id, m.title as title\n" +
                             "LIMIT 5";
             List<Record> records = session.run(query).list();
             List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());
@@ -396,10 +451,10 @@
     @Override
     public List<AnimeDTO> getAnimeTrendByLikes() throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (u:User)-[r:LIKE]->(m:MediaContent {type: 'anime'}) " +
-                            "WITH m, COUNT(r) as numLikes " +
+            String query = "MATCH (u:User)-[r:LIKE]->(a: Anime) " +
+                            "WITH a, COUNT(r) as numLikes " +
                             "ORDER BY numLikes DESC " +
-                            "RETURN m, numLikes " +
+                            "RETURN a.id as id, a.title as title, numLikes " +
                             "LIMIT 5";
             List<Record> records = session.run(query).list();
             List<AnimeDTO> list = records.stream().map(this::recordToAnimeDTO).collect(Collectors.toList());
@@ -414,10 +469,10 @@
     @Override
     public List<MangaDTO> getMangaTrendByLikes() throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (u:User)-[r:LIKE]->(m:MediaContent {type: 'manga'}) " +
+            String query = "MATCH (u:User)-[r:LIKE]->(m:Manga) " +
                             "WITH m, COUNT(r) as numLikes " +
                             "ORDER BY numLikes DESC " +
-                            "RETURN m, numLikes " +
+                            "RETURN m.id as id, m.title as title, numLikes " +
                             "LIMIT 5";
             List<Record> records = session.run(query).list();
             List<MangaDTO> list = records.stream().map(this::recordToMangaDTO).collect(Collectors.toList());
@@ -431,20 +486,23 @@
 
     //OK
     @Override
-    public List<List<String>> getAnimeGenresTrend() throws DAOException {
+    public List<String> getAnimeGenresTrend() throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (m:MediaContent {type: 'anime'})<-[r:LIKE]-(u:User)\n" +
-                            "WITH m, count(u) AS numLikes\n" +
+            String query = "MATCH (a: Anime)<-[r:LIKE]-(u:User)\n" +
+                            "WITH a, count(u) AS numLikes\n" +
                             "ORDER BY numLikes DESC\n" +
-                            "MATCH (m)-[b:BELONGS_TO]->(g:Genre)\n" +
+                            "MATCH (a)-[b:BELONGS_TO]->(g:Genre)\n" +
                             "WITH collect(g.name) AS genreNames\n" +
                             "RETURN genreNames[..10] AS genreNames";
             List<Record> records = session.run(query).list();
-            List<List<String>> genreNamesLists = records.stream()
-                    .map(this::recordToGenreNames)
+
+            List<String> genreNames = records.stream()
+                    .flatMap(record -> record.get("genreNames").asList().stream())
+                    .filter(Objects::nonNull)
+                    .map(Object::toString)
                     .collect(Collectors.toList());
 
-            return genreNamesLists;
+            return genreNames;
         } catch (Exception e) {
             throw new DAOException(e);
         }
@@ -452,20 +510,22 @@
 
     //OK
     @Override
-    public List<List<String>> getMangaGenresTrend() throws DAOException {
+    public List<String> getMangaGenresTrend() throws DAOException {
         try (Session session = getSession()) {
-            String query = "MATCH (m:MediaContent {type: 'manga'})<-[r:LIKE]-(u:User)\n" +
+            String query = "MATCH (m:Manga)<-[r:LIKE]-(u:User)\n" +
                             "WITH m, count(u) AS numLikes\n" +
                             "ORDER BY numLikes DESC\n" +
                             "MATCH (m)-[b:BELONGS_TO]->(g:Genre)\n" +
                             "WITH collect(g.name) AS genreNames\n" +
                             "RETURN genreNames[..10] AS genreNames";
             List<Record> records = session.run(query).list();
-            List<List<String>> genreNamesLists = records.stream()
-                    .map(this::recordToGenreNames)
+            List<String> genreNames = records.stream()
+                    .flatMap(record -> record.get("genreNames").asList().stream())
+                    .filter(Objects::nonNull)
+                    .map(Object::toString)
                     .collect(Collectors.toList());
 
-            return genreNamesLists;
+            return genreNames;
         } catch (Exception e) {
             throw new DAOException(e);
         }
Index: src/main/java/it/unipi/lsmsd/fnf/dao/Neo4JDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.lsmsd.fnf.dao;\r\n\r\nimport it.unipi.lsmsd.fnf.dao.exception.DAOException;\r\nimport it.unipi.lsmsd.fnf.dto.RegisteredUserDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.AnimeDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.MangaDTO;\r\n\r\nimport java.util.List;\r\n\r\npublic interface Neo4JDAO {\r\n\r\n    void likeMediaContent(String userId, String mediaId) throws DAOException;\r\n\r\n\r\n    void followUser(String followerUserId, String followingUserId) throws DAOException;\r\n\r\n\r\n    void unlikeMediaContent(String userId, String mediaId) throws DAOException;\r\n\r\n\r\n    void unfollowUser(String followerUserId, String followingUserId) throws DAOException;\r\n\r\n\r\n\r\n    List<AnimeDTO> getLikedAnime(String userId) throws DAOException;\r\n\r\n    List<MangaDTO> getLikedManga(String userId) throws DAOException;\r\n\r\n    List<RegisteredUserDTO> getFollowing(String userId) throws DAOException;\r\n\r\n    List<RegisteredUserDTO> getFollowers(String userId) throws DAOException;\r\n\r\n\r\n    List<RegisteredUserDTO> suggestUsers(String userId) throws DAOException;\r\n\r\n\r\n    List<AnimeDTO> suggestAnime(String userId) throws DAOException;\r\n\r\n    List<MangaDTO> suggestManga(String userId) throws DAOException;\r\n\r\n\r\n\r\n    List<AnimeDTO> getTrendAnimeByYear(int year) throws DAOException;\r\n\r\n    List<MangaDTO> getTrendMangaByYear(int year) throws DAOException;\r\n\r\n\r\n\r\n    List<AnimeDTO> getAnimeByGenre(String genre) throws DAOException;\r\n\r\n    List<MangaDTO> getMangaByGenre(String genre) throws DAOException;\r\n\r\n\r\n    List<List<String>> getAnimeGenresTrendByYear(int year) throws DAOException;\r\n\r\n    List<List<String>> getMangaGenresTrendByYear(int year) throws DAOException;\r\n\r\n\r\n    List<AnimeDTO> getAnimeTrendByGenre() throws DAOException;\r\n\r\n    List<MangaDTO> getMangaTrendByGenre() throws DAOException;\r\n\r\n\r\n    List<AnimeDTO> getAnimeTrendByLikes() throws DAOException;\r\n\r\n    List<MangaDTO> getMangaTrendByLikes() throws DAOException;\r\n\r\n\r\n    List<List<String>> getAnimeGenresTrend() throws DAOException;\r\n\r\n    List<List<String>> getMangaGenresTrend() throws DAOException;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/lsmsd/fnf/dao/Neo4JDAO.java b/src/main/java/it/unipi/lsmsd/fnf/dao/Neo4JDAO.java
--- a/src/main/java/it/unipi/lsmsd/fnf/dao/Neo4JDAO.java	(revision 31d1c7c14f1c424a4f510c3f0936c0bdc0c8d2ec)
+++ b/src/main/java/it/unipi/lsmsd/fnf/dao/Neo4JDAO.java	(date 1707781823189)
@@ -9,13 +9,15 @@
 
 public interface Neo4JDAO {
 
-    void likeMediaContent(String userId, String mediaId) throws DAOException;
+    void likeAnime(String userId, String animeId) throws DAOException;
+    void likeManga(String userId, String mangaId) throws DAOException;
 
 
     void followUser(String followerUserId, String followingUserId) throws DAOException;
 
 
-    void unlikeMediaContent(String userId, String mediaId) throws DAOException;
+    void unlikeAnime(String userId, String animeId) throws DAOException;
+    void unlikeManga(String userId, String mangaId) throws DAOException;
 
 
     void unfollowUser(String followerUserId, String followingUserId) throws DAOException;
@@ -51,9 +53,9 @@
     List<MangaDTO> getMangaByGenre(String genre) throws DAOException;
 
 
-    List<List<String>> getAnimeGenresTrendByYear(int year) throws DAOException;
+    List<String> getAnimeGenresTrendByYear(int year) throws DAOException;
 
-    List<List<String>> getMangaGenresTrendByYear(int year) throws DAOException;
+    List<String> getMangaGenresTrendByYear(int year) throws DAOException;
 
 
     List<AnimeDTO> getAnimeTrendByGenre() throws DAOException;
@@ -66,7 +68,7 @@
     List<MangaDTO> getMangaTrendByLikes() throws DAOException;
 
 
-    List<List<String>> getAnimeGenresTrend() throws DAOException;
+    List<String> getAnimeGenresTrend() throws DAOException;
 
-    List<List<String>> getMangaGenresTrend() throws DAOException;
+    List<String> getMangaGenresTrend() throws DAOException;
 }
Index: src/test/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.lsmsd.fnf.dao.neo4j;\r\n\r\nimport it.unipi.lsmsd.fnf.dao.Neo4JDAO;\r\nimport it.unipi.lsmsd.fnf.dao.exception.DAOException;\r\nimport it.unipi.lsmsd.fnf.dto.RegisteredUserDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.AnimeDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.MangaDTO;\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.MediaContentDTO;\r\nimport junit.framework.TestCase;\r\nimport  org.junit.Test;\r\nimport org.neo4j.driver.Record;\r\n\r\nimport java.util.List;\r\n\r\nimport static com.mongodb.assertions.Assertions.assertFalse;\r\nimport static org.bson.assertions.Assertions.assertNotNull;\r\nimport static org.junit.Assert.assertEquals;\r\n\r\npublic class Neo4JDAOImplTest {\r\n\r\n    /*@Test\r\n    public void testLikeMediaContent() throws DAOException {\r\n        Neo4JDAOImpl dao = new Neo4JDAOImpl();\r\n        dao.likeMediaContent(\"6577877be68376234760585f\",\"65789bb52f5d29465d0abcff\");\r\n    }*/\r\n\r\n    /*@Test\r\n    public void testFollowUser() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        neo4JDAO.followUser(\"6577877be68376234760585a\", \"6577877be683762347605859\");\r\n    }*/\r\n\r\n    /*@Test\r\n    public void testUnlikeMediaContent() throws DAOException {\r\n        Neo4JDAOImpl dao = new Neo4JDAOImpl();\r\n        dao.unlikeMediaContent(\"6577877be68376234760585f\",\"65789bb52f5d29465d0abcff\");\r\n    }*/\r\n\r\n    /*@Test\r\n    public void testUnfollowUser() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        neo4JDAO.unfollowUser(\"6577877be68376234760585a\", \"6577877be683762347605859\");\r\n    }*/\r\n\r\n    /*@Test\r\n    public void testGetLikedMediaContents() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<MediaContentDTO> records = neo4JDAO.getLikedMediaContents(\"6577877be68376234760585f\");\r\n    }*/\r\n\r\n    /*@Test\r\n    public void testGetLikedAnime() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<AnimeDTO> anime = neo4JDAO.getLikedAnime(\"6577877be68376234760585f\");\r\n\r\n        System.out.println(anime);\r\n    }\r\n\r\n    @Test\r\n    public void testGetLikedManga() throws DAOException{\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<MangaDTO> manga = neo4JDAO.getLikedManga(\"6577877be68376234760585f\");\r\n        System.out.println(manga);\r\n    }\r\n\r\n    @Test\r\n    public void testGetFollowing() throws DAOException {\r\n        Neo4JDAO neo4JDAO = new Neo4JDAOImpl();\r\n        List<RegisteredUserDTO> followingUsers = neo4JDAO.getFollowing(\"6577877be68376234760585d\");\r\n        for (RegisteredUserDTO user : followingUsers)\r\n            System.out.println(user);\r\n\r\n    }\r\n\r\n    @Test\r\n    public void testGetFollowers() throws DAOException {\r\n        Neo4JDAO neo4JDAO = new Neo4JDAOImpl();\r\n        List<RegisteredUserDTO> followerUsers = neo4JDAO.getFollowers(\"6577877be68376234760585d\");\r\n        System.out.println(followerUsers);\r\n    }\r\n\r\n    @Test\r\n    public void testSuggestUsers() throws DAOException {\r\n        Neo4JDAO neo4JDAO = new Neo4JDAOImpl();\r\n        List<RegisteredUserDTO> followerUsers = neo4JDAO.suggestUsers(\"6577877be68376234760585d\");\r\n        System.out.println(followerUsers);\r\n\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    public void testSuggestAnime() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        String userId = \"6577877be6837623476063e4\";\r\n\r\n        List<AnimeDTO> suggestedAnime = neo4JDAO.suggestAnime(userId);\r\n\r\n        System.out.println(suggestedAnime);\r\n    }\r\n\r\n    @Test\r\n    public void testSuggestManga() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<MangaDTO> manga = neo4JDAO.suggestManga(\"6577877be68376234760585f\");\r\n        System.out.println(manga);\r\n    }\r\n\r\n\r\n\r\n    /*@Test\r\n    public void testGetTrendAnimeByYear() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<AnimeDTO> anime = neo4JDAO.getTrendAnimeByYear(2019);\r\n        System.out.println(anime);\r\n    }\r\n\r\n    @Test\r\n    public void testGetTrendMangaByYear() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<MangaDTO> manga = neo4JDAO.getTrendMangaByYear(2019);\r\n        System.out.println(manga);\r\n    }*/\r\n\r\n\r\n\r\n    /*@Test\r\n    public void testGetAnimeByGenre() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<AnimeDTO> anime = neo4JDAO.getAnimeByGenre(\"comedy\");\r\n        System.out.println(anime);\r\n    }\r\n\r\n    @Test\r\n    public void testGetMangaByGenre() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<MangaDTO> manga = neo4JDAO.getMangaByGenre(\"Fantasy\");\r\n        System.out.println(manga);\r\n    }*/\r\n\r\n\r\n\r\n    /*@Test\r\n    public void testGetAnimeGenresTrendByYear() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<List<String>> genre = neo4JDAO.getAnimeGenresTrendByYear(2019);\r\n        System.out.println(genre);\r\n    }\r\n\r\n    @Test\r\n    public void testGetMangaGenresTrendByYear() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<List<String>> genre = neo4JDAO.getMangaGenresTrendByYear(2019);\r\n        System.out.println(genre);\r\n    }*/\r\n\r\n\r\n    /*\r\n    @Test\r\n    public void testGetAnimeTrendByGenre() throws DAOException {\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n\r\n        List<AnimeDTO> suggestedAnime = neo4JDAO.getAnimeTrendByGenre();\r\n\r\n        System.out.println(suggestedAnime);\r\n    }\r\n\r\n    @Test\r\n    public void testGetMangaTrendByGenre() throws DAOException{\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n\r\n        List<MangaDTO> suggestedManga = neo4JDAO.getMangaTrendByGenre();\r\n\r\n        System.out.println(suggestedManga);\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    public void testGetAnimeTrendByLikes() throws DAOException{\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n\r\n        List<AnimeDTO> suggestedAnime = neo4JDAO.getAnimeTrendByLikes();\r\n\r\n        System.out.println(suggestedAnime);\r\n    }\r\n\r\n    @Test\r\n    public void testGetMangaTrendByLikes() throws DAOException{\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n\r\n        List<MangaDTO> suggestedManga = neo4JDAO.getMangaTrendByLikes();\r\n\r\n        System.out.println(suggestedManga);\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    public void testGetAnimeGenresTrend() throws DAOException{\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<List<String>> genre = neo4JDAO.getAnimeGenresTrend();\r\n        System.out.println(genre);\r\n    }\r\n\r\n    @Test\r\n    public void testGetMangaGenresTrend() throws DAOException{\r\n        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();\r\n        List<List<String>> genre = neo4JDAO.getMangaGenresTrend();\r\n        System.out.println(genre);\r\n    }*/\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImplTest.java b/src/test/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImplTest.java
--- a/src/test/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImplTest.java	(revision 31d1c7c14f1c424a4f510c3f0936c0bdc0c8d2ec)
+++ b/src/test/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImplTest.java	(date 1707781823171)
@@ -17,38 +17,45 @@
 import static org.junit.Assert.assertEquals;
 
 public class Neo4JDAOImplTest {
+/*
+    @Test
+    public void testLikeAnime() throws DAOException {
+        Neo4JDAOImpl dao = new Neo4JDAOImpl();
+        dao.likeAnime("6577877be68376234760585f","65789bb52f5d29465d0abd0e");
+    }
 
-    /*@Test
-    public void testLikeMediaContent() throws DAOException {
+    @Test
+    public void testLikeManga() throws DAOException {
         Neo4JDAOImpl dao = new Neo4JDAOImpl();
-        dao.likeMediaContent("6577877be68376234760585f","65789bb52f5d29465d0abcff");
-    }*/
+        dao.likeManga("6577877be68376234760585f","657ac61bb34f5514b91ea234");
+    }
 
-    /*@Test
+    @Test
     public void testFollowUser() throws DAOException {
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
         neo4JDAO.followUser("6577877be68376234760585a", "6577877be683762347605859");
-    }*/
+    }
 
-    /*@Test
-    public void testUnlikeMediaContent() throws DAOException {
+    @Test
+    public void testUnlikeAnime() throws DAOException {
         Neo4JDAOImpl dao = new Neo4JDAOImpl();
-        dao.unlikeMediaContent("6577877be68376234760585f","65789bb52f5d29465d0abcff");
-    }*/
+        dao.unlikeAnime("6577877be68376234760585f","65789bb52f5d29465d0abd0e");
+    }
+    @Test
+    public void testUnlikeManga() throws DAOException {
+        Neo4JDAOImpl dao = new Neo4JDAOImpl();
+        dao.unlikeManga("6577877be68376234760585f","657ac61bb34f5514b91ea234");
+    }
 
-    /*@Test
+    @Test
     public void testUnfollowUser() throws DAOException {
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
         neo4JDAO.unfollowUser("6577877be68376234760585a", "6577877be683762347605859");
-    }*/
+    }
 
-    /*@Test
-    public void testGetLikedMediaContents() throws DAOException {
-        Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
-        List<MediaContentDTO> records = neo4JDAO.getLikedMediaContents("6577877be68376234760585f");
-    }*/
 
-    /*@Test
+
+    @Test
     public void testGetLikedAnime() throws DAOException {
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
         List<AnimeDTO> anime = neo4JDAO.getLikedAnime("6577877be68376234760585f");
@@ -88,7 +95,6 @@
     }
 
 
-
     @Test
     public void testSuggestAnime() throws DAOException {
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
@@ -102,13 +108,15 @@
     @Test
     public void testSuggestManga() throws DAOException {
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
-        List<MangaDTO> manga = neo4JDAO.suggestManga("6577877be68376234760585f");
+        List<MangaDTO> manga = neo4JDAO.suggestManga("6577877be6837623476063e4");
         System.out.println(manga);
     }
+    */
 
 
-
-    /*@Test
+    //OK
+    /*
+    @Test
     public void testGetTrendAnimeByYear() throws DAOException {
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
         List<AnimeDTO> anime = neo4JDAO.getTrendAnimeByYear(2019);
@@ -120,11 +128,11 @@
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
         List<MangaDTO> manga = neo4JDAO.getTrendMangaByYear(2019);
         System.out.println(manga);
-    }*/
+    }
 
 
 
-    /*@Test
+    @Test
     public void testGetAnimeByGenre() throws DAOException {
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
         List<AnimeDTO> anime = neo4JDAO.getAnimeByGenre("comedy");
@@ -136,26 +144,25 @@
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
         List<MangaDTO> manga = neo4JDAO.getMangaByGenre("Fantasy");
         System.out.println(manga);
-    }*/
+    } */
 
 
-
-    /*@Test
+    @Test
     public void testGetAnimeGenresTrendByYear() throws DAOException {
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
-        List<List<String>> genre = neo4JDAO.getAnimeGenresTrendByYear(2019);
+        List<String> genre = neo4JDAO.getAnimeGenresTrendByYear(2020);
         System.out.println(genre);
     }
 
     @Test
     public void testGetMangaGenresTrendByYear() throws DAOException {
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
-        List<List<String>> genre = neo4JDAO.getMangaGenresTrendByYear(2019);
+        List<String> genre = neo4JDAO.getMangaGenresTrendByYear(2019);
         System.out.println(genre);
-    }*/
+    }
 
 
-    /*
+
     @Test
     public void testGetAnimeTrendByGenre() throws DAOException {
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
@@ -199,16 +206,16 @@
     @Test
     public void testGetAnimeGenresTrend() throws DAOException{
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
-        List<List<String>> genre = neo4JDAO.getAnimeGenresTrend();
+        List<String> genre = neo4JDAO.getAnimeGenresTrend();
         System.out.println(genre);
     }
 
     @Test
     public void testGetMangaGenresTrend() throws DAOException{
         Neo4JDAOImpl neo4JDAO = new Neo4JDAOImpl();
-        List<List<String>> genre = neo4JDAO.getMangaGenresTrend();
+        List<String> genre = neo4JDAO.getMangaGenresTrend();
         System.out.println(genre);
-    }*/
+    }
 
 
 }
\ No newline at end of file
Index: src/main/java/it/unipi/lsmsd/fnf/dto/PageDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.lsmsd.fnf.dto;\r\n\r\nimport it.unipi.lsmsd.fnf.dto.mediaContent.MediaContentDTO;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PageDTO <T extends MediaContentDTO>{\r\n    private List<T> entries;\r\n    private int totalCount;\r\n\r\n    public PageDTO(List<T> entries, int totalCount) {\r\n        this.entries = entries;\r\n        this.totalCount = totalCount;\r\n    }\r\n\r\n    public List<T> getEntries() {\r\n        return entries;\r\n    }\r\n\r\n    public int getTotalCount() {\r\n        return totalCount;\r\n    }\r\n\r\n    public void add (T entry) {\r\n        entries.add(entry);\r\n    }\r\n\r\n    public void remove (T entry) {\r\n        entries.remove(entry);\r\n    }\r\n\r\n    public void setEntries(List<T> entries) {\r\n        this.entries = entries;\r\n    }\r\n\r\n\r\n\r\n    public void setTotalCount(int totalCount) {\r\n        this.totalCount = totalCount;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"PageDTO{\" +\r\n                \"entries=\" + entries +\r\n                \", totalCount=\" + totalCount +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/lsmsd/fnf/dto/PageDTO.java b/src/main/java/it/unipi/lsmsd/fnf/dto/PageDTO.java
--- a/src/main/java/it/unipi/lsmsd/fnf/dto/PageDTO.java	(revision 31d1c7c14f1c424a4f510c3f0936c0bdc0c8d2ec)
+++ b/src/main/java/it/unipi/lsmsd/fnf/dto/PageDTO.java	(date 1707667142823)
@@ -9,6 +9,7 @@
     private List<T> entries;
     private int totalCount;
 
+    public PageDTO() {};
     public PageDTO(List<T> entries, int totalCount) {
         this.entries = entries;
         this.totalCount = totalCount;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ArtifactsWorkspaceSettings\">\r\n    <artifacts-to-build>\r\n      <artifact name=\"MangaUniverse:war exploded\" />\r\n    </artifacts-to-build>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"6440fbba-1ec4-43f5-8314-d4abadeae161\" name=\"Changes\" comment=\"Anime LIST WORKING\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dao/Neo4JDAO.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dao/Neo4JDAO.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MangaDTO.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MangaDTO.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/service/MediaContentService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/service/MediaContentService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImplTest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImplTest.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/dto/mediaContent/MangaDTO.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/dto/mediaContent/MangaDTO.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/service/MediaContentService.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/service/MediaContentService.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.class\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"TypeScript File\" />\r\n        <option value=\"Jsp File\" />\r\n        <option value=\"CSS File\" />\r\n        <option value=\"JavaScript File\" />\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"JUnit5 Test Class\" />\r\n        <option value=\"JUnit3 Test Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"flavio\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"KubernetesApiProvider\">{\r\n  &quot;isMigrated&quot;: true\r\n}</component>\r\n  <component name=\"LogFilters\">\r\n    <option name=\"FILTER_ERRORS\" value=\"false\" />\r\n    <option name=\"FILTER_WARNINGS\" value=\"false\" />\r\n    <option name=\"FILTER_INFO\" value=\"true\" />\r\n    <option name=\"FILTER_DEBUG\" value=\"true\" />\r\n    <option name=\"CUSTOM_FILTER\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ZqjjWVhYZeByOSywVKE15CFkpG\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.AnimeDAOTest.executor\": \"Run\",\r\n    \"Application.MangaDAOTest.executor\": \"Run\",\r\n    \"Application.PersonalListDAOTest.executor\": \"Run\",\r\n    \"Application.UserDAOTest.executor\": \"Run\",\r\n    \"JUnit.AnimeDAOImplTest.executor\": \"Debug\",\r\n    \"JUnit.AnimeDAOImplTest.insert.executor\": \"Coverage\",\r\n    \"JUnit.Neo4JDAOImplTest.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetAnimeByGenre.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetAnimeGenresTrend.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetAnimeGenresTrendByYear.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetAnimeTrendByGenre.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetAnimeTrendByLikes.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetFollowers.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetFollowing.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetLikedAnime.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetLikedManga.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetMangaByGenre.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetMangaGenresTrend.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetMangaGenresTrendByYear.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetMangaTrendByGenre.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetMangaTrendByLikes.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetTrendAnimeByYear.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testGetTrendMangaByYear.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testLikeMediaContent.executor\": \"Debug\",\r\n    \"JUnit.Neo4JDAOImplTest.testSuggestAnime.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testSuggestAnimeByGenre.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testSuggestManga.executor\": \"Run\",\r\n    \"JUnit.Neo4JDAOImplTest.testSuggestUsers.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"Tomcat Server.Tomcat 10.1.16.executor\": \"Run\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary\": \"JUnit3\",\r\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit3\": \"junit.framework.TestCase\",\r\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5\": \"\",\r\n    \"dart.analysis.tool.window.visible\": \"false\",\r\n    \"git-widget-placeholder\": \"noemi\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/messi/Documents/GitHub/MangaUniverse/src/main/java/it/unipi/lsmsd/fnf/service\",\r\n    \"list.type.of.created.stylesheet\": \"CSS\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Artifacts\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"configurable.group.build\",\r\n    \"ts.external.directory.path\": \"C:\\\\Program Files\\\\JetBrains\\\\IntelliJ IDEA 2023.3.2\\\\plugins\\\\javascript-impl\\\\jsLanguageServicesImpl\\\\external\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"ReactorSettings\">\r\n    <option name=\"notificationShown\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\messi\\Documents\\GitHub\\MangaUniverse\\src\\main\\java\\it\\unipi\\lsmsd\\fnf\\service\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\lenovo\\Documents\\GitHub\\MangaUniverse\\src\\main\\webapp\\images\" />\r\n      <recent name=\"C:\\Users\\messi\\Documents\\GitHub\\MangaUniverse\\src\\main\\webapp\\WEB-INF\" />\r\n      <recent name=\"C:\\Users\\messi\\Documents\\GitHub\\MangaUniverse\\src\\main\\resources\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.Recents.Supers\">\r\n      <recent name=\"junit.framework.TestCase\" />\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"it.unipi.lsmsd.fnf.model\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.RecentsKey\">\r\n      <recent name=\"it.unipi.lsmsd.fnf.dao.neo4j\" />\r\n      <recent name=\"it.unipi.lsmsd.fnf.dao.mongo\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"JUnit.Neo4JDAOImplTest.testSuggestAnimeByGenre\">\r\n    <configuration default=\"true\" type=\"#com.intellij.j2ee.web.tomcat.TomcatRunConfigurationFactory\" factoryName=\"Local\" ALTERNATIVE_JRE_ENABLED=\"false\">\r\n      <deployment />\r\n      <server-settings>\r\n        <option name=\"BASE_DIRECTORY_NAME\" value=\"042d5f66-0981-43b9-8a70-05f2832d13ea\" />\r\n      </server-settings>\r\n      <predefined_log_file enabled=\"true\" id=\"Tomcat\" />\r\n      <predefined_log_file enabled=\"true\" id=\"Tomcat Catalina\" />\r\n      <predefined_log_file id=\"Tomcat Manager\" />\r\n      <predefined_log_file id=\"Tomcat Host Manager\" />\r\n      <predefined_log_file id=\"Tomcat Localhost Access\" />\r\n      <RunnerSettings RunnerId=\"Debug\">\r\n        <option name=\"DEBUG_PORT\" value=\"63655\" />\r\n      </RunnerSettings>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Cover\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Debug\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Profile\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Run\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"tests\" factoryName=\"Doctests\">\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <module name=\"\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"CLASS_NAME\" value=\"\" />\r\n      <option name=\"METHOD_NAME\" value=\"\" />\r\n      <option name=\"FOLDER_NAME\" value=\"\" />\r\n      <option name=\"TEST_TYPE\" value=\"TEST_SCRIPT\" />\r\n      <option name=\"PATTERN\" value=\"\" />\r\n      <option name=\"USE_PATTERN\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Neo4JDAOImplTest.testGetAnimeTrendByGenre\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MangaUniverse\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"it.unipi.lsmsd.fnf.dao.neo4j.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"it.unipi.lsmsd.fnf.dao.neo4j\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"it.unipi.lsmsd.fnf.dao.neo4j.Neo4JDAOImplTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testGetAnimeTrendByGenre\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Neo4JDAOImplTest.testGetAnimeTrendByLikes\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MangaUniverse\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"it.unipi.lsmsd.fnf.dao.neo4j.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"it.unipi.lsmsd.fnf.dao.neo4j\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"it.unipi.lsmsd.fnf.dao.neo4j.Neo4JDAOImplTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testGetAnimeTrendByLikes\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Neo4JDAOImplTest.testGetMangaTrendByGenre\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MangaUniverse\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"it.unipi.lsmsd.fnf.dao.neo4j.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"it.unipi.lsmsd.fnf.dao.neo4j\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"it.unipi.lsmsd.fnf.dao.neo4j.Neo4JDAOImplTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testGetMangaTrendByGenre\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Neo4JDAOImplTest.testGetMangaTrendByLikes\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MangaUniverse\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"it.unipi.lsmsd.fnf.dao.neo4j.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"it.unipi.lsmsd.fnf.dao.neo4j\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"it.unipi.lsmsd.fnf.dao.neo4j.Neo4JDAOImplTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testGetMangaTrendByLikes\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Neo4JDAOImplTest.testSuggestAnimeByGenre\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"MangaUniverse\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"it.unipi.lsmsd.fnf.dao.neo4j.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"it.unipi.lsmsd.fnf.dao.neo4j\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"it.unipi.lsmsd.fnf.dao.neo4j.Neo4JDAOImplTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testSuggestAnimeByGenre\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Tomcat 10.1.16\" type=\"#com.intellij.j2ee.web.tomcat.TomcatRunConfigurationFactory\" factoryName=\"Local\" APPLICATION_SERVER_NAME=\"Tomcat 10.1.16\" ALTERNATIVE_JRE_ENABLED=\"true\" ALTERNATIVE_JRE_PATH=\"jdk21\" nameIsGenerated=\"true\">\r\n      <option name=\"UPDATE_ON_FRAME_DEACTIVATION\" value=\"true\" />\r\n      <option name=\"UPDATE_CLASSES_ON_FRAME_DEACTIVATION\" value=\"true\" />\r\n      <deployment>\r\n        <artifact name=\"MangaUniverse:war exploded\">\r\n          <settings>\r\n            <option name=\"CONTEXT_PATH\" value=\"/MangaUniverse_war_exploded\" />\r\n          </settings>\r\n        </artifact>\r\n      </deployment>\r\n      <server-settings>\r\n        <option name=\"BASE_DIRECTORY_NAME\" value=\"c8c580db-ac18-4a69-90ca-52428369c631\" />\r\n      </server-settings>\r\n      <predefined_log_file enabled=\"true\" id=\"Tomcat\" />\r\n      <predefined_log_file enabled=\"true\" id=\"Tomcat Catalina\" />\r\n      <predefined_log_file id=\"Tomcat Manager\" />\r\n      <predefined_log_file id=\"Tomcat Host Manager\" />\r\n      <predefined_log_file id=\"Tomcat Localhost Access\" />\r\n      <RunnerSettings RunnerId=\"Debug\">\r\n        <option name=\"DEBUG_PORT\" value=\"63648\" />\r\n      </RunnerSettings>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Cover\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Debug\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Profile\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Run\">\r\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\r\n        <STARTUP>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </STARTUP>\r\n        <SHUTDOWN>\r\n          <option name=\"USE_DEFAULT\" value=\"true\" />\r\n          <option name=\"SCRIPT\" value=\"\" />\r\n          <option name=\"VM_PARAMETERS\" value=\"\" />\r\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\r\n        </SHUTDOWN>\r\n      </ConfigurationWrapper>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n        <option name=\"BuildArtifacts\" enabled=\"true\">\r\n          <artifact name=\"MangaUniverse:war exploded\" />\r\n        </option>\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.Neo4JDAOImplTest.testSuggestAnimeByGenre\" />\r\n        <item itemvalue=\"JUnit.Neo4JDAOImplTest.testGetMangaTrendByLikes\" />\r\n        <item itemvalue=\"JUnit.Neo4JDAOImplTest.testGetAnimeTrendByLikes\" />\r\n        <item itemvalue=\"JUnit.Neo4JDAOImplTest.testGetMangaTrendByGenre\" />\r\n        <item itemvalue=\"JUnit.Neo4JDAOImplTest.testGetAnimeTrendByGenre\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-21.0.1-openjdk-21.0.1-e1d2075fd9a7-b4911678\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"6440fbba-1ec4-43f5-8314-d4abadeae161\" name=\"Changes\" comment=\"\" />\r\n      <created>1703156638702</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1703156638702</updated>\r\n      <workItem from=\"1703156639850\" duration=\"1870000\" />\r\n      <workItem from=\"1703159297285\" duration=\"6195000\" />\r\n      <workItem from=\"1703176193844\" duration=\"1393000\" />\r\n      <workItem from=\"1705404118965\" duration=\"15710000\" />\r\n      <workItem from=\"1705424364914\" duration=\"5441000\" />\r\n      <workItem from=\"1705497454828\" duration=\"9071000\" />\r\n      <workItem from=\"1705510651693\" duration=\"1146000\" />\r\n      <workItem from=\"1705512073316\" duration=\"109000\" />\r\n      <workItem from=\"1705512195414\" duration=\"599000\" />\r\n      <workItem from=\"1705587388092\" duration=\"1254000\" />\r\n      <workItem from=\"1705588689957\" duration=\"5821000\" />\r\n      <workItem from=\"1705668095034\" duration=\"1605000\" />\r\n      <workItem from=\"1705669726394\" duration=\"431000\" />\r\n      <workItem from=\"1705670201698\" duration=\"7351000\" />\r\n      <workItem from=\"1705760255853\" duration=\"18879000\" />\r\n      <workItem from=\"1705786685354\" duration=\"1951000\" />\r\n      <workItem from=\"1705793246109\" duration=\"52000\" />\r\n      <workItem from=\"1705793357879\" duration=\"716000\" />\r\n      <workItem from=\"1705839002311\" duration=\"17305000\" />\r\n      <workItem from=\"1705944742309\" duration=\"8011000\" />\r\n      <workItem from=\"1706017558586\" duration=\"5391000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Anime LIST WORKING\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707410200072</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707410200072</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Anime LIST WORKING\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Anime LIST WORKING\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dao/mongo/AnimeDAOImpl.java</url>\r\n          <line>31</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/workspace_xml$AnimeDAOImplTest_insert.ic\" NAME=\"AnimeDAOImplTest.insert Coverage Results\" MODIFIED=\"1707238225663\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>it.unipi.lsmsd.fnf.dao.mongo.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 31d1c7c14f1c424a4f510c3f0936c0bdc0c8d2ec)
+++ b/.idea/workspace.xml	(date 1707781830585)
@@ -9,15 +9,17 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="6440fbba-1ec4-43f5-8314-d4abadeae161" name="Changes" comment="Anime LIST WORKING">
+    <list default="true" id="6440fbba-1ec4-43f5-8314-d4abadeae161" name="Changes" comment="Test neo4jDAO ok">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dao/Neo4JDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dao/Neo4JDAO.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImpl.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MangaDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MangaDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dto/PageDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dto/PageDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MediaContentDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/dto/mediaContent/MediaContentDTO.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/service/MediaContentService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/service/MediaContentService.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/test/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImplTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/it/unipi/lsmsd/fnf/dao/neo4j/Neo4JDAOImplTest.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/dto/mediaContent/MangaDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/dto/mediaContent/MangaDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/dto/PageDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/dto/PageDTO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/dto/mediaContent/MediaContentDTO.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/dto/mediaContent/MediaContentDTO.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/service/MediaContentService.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/service/MediaContentService.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/it/unipi/lsmsd/fnf/service/impl/MediaContentServiceImpl.class" afterDir="false" />
     </list>
@@ -82,6 +84,8 @@
     "JUnit.AnimeDAOImplTest.executor": "Debug",
     "JUnit.AnimeDAOImplTest.insert.executor": "Coverage",
     "JUnit.Neo4JDAOImplTest.executor": "Run",
+    "JUnit.Neo4JDAOImplTest.testAnime.executor": "Run",
+    "JUnit.Neo4JDAOImplTest.testFollowUser.executor": "Run",
     "JUnit.Neo4JDAOImplTest.testGetAnimeByGenre.executor": "Run",
     "JUnit.Neo4JDAOImplTest.testGetAnimeGenresTrend.executor": "Run",
     "JUnit.Neo4JDAOImplTest.testGetAnimeGenresTrendByYear.executor": "Run",
@@ -98,11 +102,17 @@
     "JUnit.Neo4JDAOImplTest.testGetMangaTrendByLikes.executor": "Run",
     "JUnit.Neo4JDAOImplTest.testGetTrendAnimeByYear.executor": "Run",
     "JUnit.Neo4JDAOImplTest.testGetTrendMangaByYear.executor": "Run",
+    "JUnit.Neo4JDAOImplTest.testLikeAnime.executor": "Run",
+    "JUnit.Neo4JDAOImplTest.testLikeManga.executor": "Run",
     "JUnit.Neo4JDAOImplTest.testLikeMediaContent.executor": "Debug",
+    "JUnit.Neo4JDAOImplTest.testManga.executor": "Run",
     "JUnit.Neo4JDAOImplTest.testSuggestAnime.executor": "Run",
     "JUnit.Neo4JDAOImplTest.testSuggestAnimeByGenre.executor": "Run",
     "JUnit.Neo4JDAOImplTest.testSuggestManga.executor": "Run",
     "JUnit.Neo4JDAOImplTest.testSuggestUsers.executor": "Run",
+    "JUnit.Neo4JDAOImplTest.testUnfollowUser.executor": "Run",
+    "JUnit.Neo4JDAOImplTest.testUnlikeAnime.executor": "Run",
+    "JUnit.Neo4JDAOImplTest.testUnlikeManga.executor": "Run",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "Tomcat Server.Tomcat 10.1.16.executor": "Run",
@@ -153,7 +163,7 @@
       <recent name="it.unipi.lsmsd.fnf.dao.mongo" />
     </key>
   </component>
-  <component name="RunManager" selected="JUnit.Neo4JDAOImplTest.testSuggestAnimeByGenre">
+  <component name="RunManager" selected="JUnit.Neo4JDAOImplTest.testGetMangaGenresTrend">
     <configuration default="true" type="#com.intellij.j2ee.web.tomcat.TomcatRunConfigurationFactory" factoryName="Local" ALTERNATIVE_JRE_ENABLED="false">
       <deployment />
       <server-settings>
@@ -251,7 +261,7 @@
       <option name="USE_PATTERN" value="false" />
       <method v="2" />
     </configuration>
-    <configuration name="Neo4JDAOImplTest.testGetAnimeTrendByGenre" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="Neo4JDAOImplTest.testGetAnimeGenresTrend" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="MangaUniverse" />
       <extension name="coverage">
         <pattern>
@@ -261,7 +271,7 @@
       </extension>
       <option name="PACKAGE_NAME" value="it.unipi.lsmsd.fnf.dao.neo4j" />
       <option name="MAIN_CLASS_NAME" value="it.unipi.lsmsd.fnf.dao.neo4j.Neo4JDAOImplTest" />
-      <option name="METHOD_NAME" value="testGetAnimeTrendByGenre" />
+      <option name="METHOD_NAME" value="testGetAnimeGenresTrend" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
@@ -283,7 +293,7 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="Neo4JDAOImplTest.testGetMangaTrendByGenre" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="Neo4JDAOImplTest.testGetMangaGenresTrend" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="MangaUniverse" />
       <extension name="coverage">
         <pattern>
@@ -293,13 +303,13 @@
       </extension>
       <option name="PACKAGE_NAME" value="it.unipi.lsmsd.fnf.dao.neo4j" />
       <option name="MAIN_CLASS_NAME" value="it.unipi.lsmsd.fnf.dao.neo4j.Neo4JDAOImplTest" />
-      <option name="METHOD_NAME" value="testGetMangaTrendByGenre" />
+      <option name="METHOD_NAME" value="testGetMangaGenresTrend" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="Neo4JDAOImplTest.testGetMangaTrendByLikes" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="Neo4JDAOImplTest.testGetMangaTrendByGenre" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="MangaUniverse" />
       <extension name="coverage">
         <pattern>
@@ -309,13 +319,13 @@
       </extension>
       <option name="PACKAGE_NAME" value="it.unipi.lsmsd.fnf.dao.neo4j" />
       <option name="MAIN_CLASS_NAME" value="it.unipi.lsmsd.fnf.dao.neo4j.Neo4JDAOImplTest" />
-      <option name="METHOD_NAME" value="testGetMangaTrendByLikes" />
+      <option name="METHOD_NAME" value="testGetMangaTrendByGenre" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="Neo4JDAOImplTest.testSuggestAnimeByGenre" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="Neo4JDAOImplTest.testGetMangaTrendByLikes" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="MangaUniverse" />
       <extension name="coverage">
         <pattern>
@@ -325,7 +335,7 @@
       </extension>
       <option name="PACKAGE_NAME" value="it.unipi.lsmsd.fnf.dao.neo4j" />
       <option name="MAIN_CLASS_NAME" value="it.unipi.lsmsd.fnf.dao.neo4j.Neo4JDAOImplTest" />
-      <option name="METHOD_NAME" value="testSuggestAnimeByGenre" />
+      <option name="METHOD_NAME" value="testGetMangaTrendByLikes" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
@@ -421,11 +431,11 @@
     </configuration>
     <recent_temporary>
       <list>
-        <item itemvalue="JUnit.Neo4JDAOImplTest.testSuggestAnimeByGenre" />
+        <item itemvalue="JUnit.Neo4JDAOImplTest.testGetMangaGenresTrend" />
+        <item itemvalue="JUnit.Neo4JDAOImplTest.testGetAnimeGenresTrend" />
         <item itemvalue="JUnit.Neo4JDAOImplTest.testGetMangaTrendByLikes" />
         <item itemvalue="JUnit.Neo4JDAOImplTest.testGetAnimeTrendByLikes" />
         <item itemvalue="JUnit.Neo4JDAOImplTest.testGetMangaTrendByGenre" />
-        <item itemvalue="JUnit.Neo4JDAOImplTest.testGetAnimeTrendByGenre" />
       </list>
     </recent_temporary>
   </component>
@@ -474,7 +484,15 @@
       <option name="project" value="LOCAL" />
       <updated>1707410200072</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="Test neo4jDAO ok">
+      <option name="closed" value="true" />
+      <created>1707439324241</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1707439324241</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -493,7 +511,8 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Anime LIST WORKING" />
-    <option name="LAST_COMMIT_MESSAGE" value="Anime LIST WORKING" />
+    <MESSAGE value="Test neo4jDAO ok" />
+    <option name="LAST_COMMIT_MESSAGE" value="Test neo4jDAO ok" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
